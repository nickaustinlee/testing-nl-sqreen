'use strict';
const INTERFACES = require('../enums').INTERFACES;
const TRANSPORT = require('../enums').TRANSPORT;
const Transports = require('../transports');


module.exports = function (payload, ecoSystemInterface) {

    const request = payload.request;
    if (request !== './lib/channel_model') {
        return;
    }

    const module = payload.module;

    const instrumentation = ecoSystemInterface.getInterface(INTERFACES.INSTRUMENTATION);
    const transport = ecoSystemInterface.getInterface(INTERFACES.TRANSPORT);

    const getHook = function (server, listener) {

        let host = '';
        try {
            host = server.connection.stream._host;
        }
        catch (_) {}

        return function (message) {

            transport.startIncomingTransaction(message, (session, budget) => { // TODO: abstract in agent

                budget.startCount();

                try {
                    const todo = transport.shouldPropagate(TRANSPORT.SCOPE.PRODUCER);
                    const trigger = todo.trigger;
                    const fields = todo.fields;

                    if (fields.length !== 0) {
                        const resolved = new Transports.ConsumerTransport();
                        resolved.addMessageType(fields, TRANSPORT.TRANSPORT_TYPE.AMQP);
                        if (fields.indexOf('host') > -1) {
                            resolved.host = host;
                        }
                        resolved.addTA(fields, ecoSystemInterface);
                        resolved.addIP(fields, host);

                        if (fields.indexOf('topic') > -1) {
                            resolved.topic = message.fields.routingKey;
                        }
                        transport.propagate(resolved, trigger); // Cleanup will never be called in that case :thinking:
                    }
                }
                catch (_) {}
                budget.stopCount();
                return listener.apply(this, arguments);

            });
        };
    };

    instrumentation.strategies.patchEventListeners(module.Channel.prototype, 'delivery', getHook);

};
