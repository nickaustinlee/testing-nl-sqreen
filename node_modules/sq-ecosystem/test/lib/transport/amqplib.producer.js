/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Shimmer = require('shimmer');

const AMQPLibProducerTransport = require('../../../lib/transport/amqp.producer');
const INTERFACES = require('../../../lib/enums').INTERFACES;

describe('amqplib.producer', () => {

    it('should test amqplib.publish', { plan: 3 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        iFace[INTERFACES.INSTRUMENTATION].strategies.wrap = function (holder, key, moduleIdentity, holderName, pre, post, asyncPost) {

            Shimmer.wrap(holder, key, (original) => {

                return function () {

                    pre && pre.method(arguments, undefined, undefined, this);

                    const res = original.apply(this, arguments);
                    post && post.method(arguments, undefined, undefined, this);
                    return res;

                };
            });
        };
        iFace[INTERFACES.TRACING].getTracingIdentifier = function () {

            return 'ti';
        };
        iFace[INTERFACES.TRACING].getAsyncStorage = function () {

            const res = new Map();
            res.enter = () => {};
            res.exit = () => {};
            return res;
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: ['host', 'ip', 'tracing_identifier', 'topic'],
                trigger: {}
            };
        };

        iFace[INTERFACES.TRANSPORT].propagate = function (resolved, trigger) {

            expect(trigger).to.equal({});
            expect(resolved).to.equal({
                host: '127.0.0.1',
                ip: '127.0.0.1',
                tracing_identifier: 'ti',
                topic: 'topic'
            });
        };

        const module = {
            Channel: class {

                constructor(host) {

                    this.connection = {
                        stream: {
                            _host: host
                        }
                    };
                }

                publish(q, k, message) {

                    expect(message.toString()).to.equal('ok\n');
                }
            }
        };

        AMQPLibProducerTransport({ module, identity: {}, request: './lib/channel_model' }, iFace);
        AMQPLibProducerTransport({ module, identity: {}, request: './lib/channel_model2' }, iFace);
        const channel = new module.Channel('127.0.0.1');
        channel.publish('', 'topic', Buffer.from('ok\n'));
        done();
    });

    it('should test amqplib.publish', { plan: 3 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        iFace[INTERFACES.INSTRUMENTATION].strategies.wrap = function (holder, key, moduleIdentity, holderName, pre, post, asyncPost) {

            Shimmer.wrap(holder, key, (original) => {

                return function () {

                    pre && pre.method(arguments, undefined, undefined, this);

                    const res = original.apply(this, arguments);
                    post && post.method(arguments, undefined, undefined, this);
                    return res;

                };
            });
        };
        iFace[INTERFACES.TRACING].getTracingIdentifier = function () {

            return 'ti';
        };
        iFace[INTERFACES.TRACING].getAsyncStorage = function () {

            const res = new Map();
            res.enter = () => {};
            res.exit = () => {};
            return res;
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: ['ip', 'tracing_identifier'],
                trigger: {}
            };
        };

        iFace[INTERFACES.TRANSPORT].propagate = function (resolved, trigger) {

            expect(trigger).to.equal({});
            expect(resolved).to.equal({
                ip: '127.0.0.1',
                tracing_identifier: 'ti'
            });

            return function () {

                done();
            };
        };

        const module = {
            Channel: class {

                constructor(host) {

                    this.connection = {
                        stream: {
                            _host: host
                        }
                    };
                }

                publish(q, k, message) {

                    expect(message.toString()).to.equal('ok\n');
                }
            }
        };

        AMQPLibProducerTransport({ module, identity: {}, request: './lib/channel_model' }, iFace);
        AMQPLibProducerTransport({ module, identity: {}, request: './lib/channel_model2' }, iFace);
        const channel = new module.Channel('127.0.0.1');
        channel.publish('', 'topic', Buffer.from('ok\n'));
    });


    it('should test amqplib.publish', { plan: 1 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        iFace[INTERFACES.INSTRUMENTATION].strategies.wrap = function (holder, key, moduleIdentity, holderName, pre, post, asyncPost) {

            Shimmer.wrap(holder, key, (original) => {

                return function () {

                    pre && pre.method(arguments, undefined, undefined, this);

                    return original.apply(this, arguments);
                };
            });
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: [],
                trigger: {}
            };
        };

        const module = {
            Channel: class {

                constructor(host) {

                    this.connection = {
                        stream: {
                            _host: host
                        }
                    };
                }

                publish(q, k, message) {

                    expect(message.toString()).to.equal('ok\n');
                }
            }
        };

        AMQPLibProducerTransport({ module, identity: {}, request: './lib/channel_model' }, iFace);
        AMQPLibProducerTransport({ module, identity: {}, request: './lib/channel_model2' }, iFace);
        const channel = new module.Channel('127.0.0.1');
        channel.publish('', 'topic', Buffer.from('ok\n'));
        done();
    });
});
