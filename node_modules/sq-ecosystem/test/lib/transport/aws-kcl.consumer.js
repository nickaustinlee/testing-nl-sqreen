/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Consumer = require('../../../lib/transport/aws-kcl.consumer');
const INTERFACES = require('../../../lib/enums').INTERFACES;

describe('aws-kcl.consumer', () => {

    it('should test aws-kcl', { plan: 4 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        const b = {
            startCount() {

                expect(1).to.equal(1);
            },
            stopCount() {

                expect(1).to.equal(1);
            }
        };
        const s = new Map();

        iFace[INTERFACES.TRANSPORT].startIncomingTransaction = function (o, cb) {

            return cb(s, b);
        };

        iFace[INTERFACES.TRACING].getTracingIdentifier = function () {

            return 'ti';
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: ['message_type'],
                trigger: {}
            };
        };

        iFace[INTERFACES.TRANSPORT].propagate = function (resolved, trigger) {

            expect(trigger).to.equal({});
            expect(resolved).to.equal({
                message_type: 'aws-kinesis'
            });
            return function () {

                throw new Error('should not be called');
            };
        };

        const module = class {

            _onRecordProcessorAction(action) {

                if (action && action.action === 'end'){
                    done();
                }
            }
        };

        Consumer({ module, identity: {}, request: './kcl_manager' }, iFace);
        Consumer({ module, identity: {}, request: 'aws-sdk3' }, iFace);
        const item = new module();

        item._onRecordProcessorAction();
        item._onRecordProcessorAction({ action: 'processRecords' });
        item._onRecordProcessorAction({ action: 'end' });
    });

    it('should test aws-kcl', { plan: 2 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        const b = {
            startCount() {

                expect(1).to.equal(1);
            },
            stopCount() {

                expect(1).to.equal(1);
            }
        };
        const s = new Map();

        iFace[INTERFACES.TRANSPORT].startIncomingTransaction = function (o, cb) {

            return cb(s, b);
        };

        iFace[INTERFACES.TRACING].getTracingIdentifier = function () {

            return 'ti';
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: [],
                trigger: {}
            };
        };

        const module = class {

            _onRecordProcessorAction(action) {

                if (action && action.action === 'end'){
                    done();
                }
            }
        };

        Consumer({ module, identity: {}, request: './kcl_manager' }, iFace);
        Consumer({ module, identity: {}, request: 'aws-sdk3' }, iFace);
        const item = new module();

        item._onRecordProcessorAction();
        item._onRecordProcessorAction({ action: 'processRecords' });
        item._onRecordProcessorAction({ action: 'end' });
    });

});
