/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Event = require('events');

const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Ecosystem = require('../../../index');
const Transport = require('../../../lib/transport/index');
const Manifest = require('../../../manifest');
const INTERFACES = require('../../../lib/enums').INTERFACES;
const Logger = require('../../../lib/logger');

const TestUtils = require('../../test_utils/index');

describe('Transport', () => {

    describe('enable', () => {

        it('should hook an arbitrary module once with the right method', { plan: 1 }, (done) => {

            Manifest.transport.incoming.myModule = true;
            Manifest.transport.incoming.myModule2 = false;
            Manifest.transport.incoming.myModule3 = false;
            const pl = {
                module: {},
                identity: {}
            };
            Transport._HOOKS.incoming.myModule = function (payload) {

                expect(payload).to.equal(pl);
            };
            Transport._HOOKS.incoming.myModule2 = function () {};

            const loader = new Event.EventEmitter();

            const iFace = TestUtils.getEcosystemMock();
            iFace[INTERFACES.INSTRUMENTATION].loader = loader;

            Ecosystem.init(Logger.Logger, iFace);

            loader.emit('myModule', pl);
            loader.emit('myModule', pl);
            loader.emit('myModule', { identity: {} });
            // cleanup
            delete Transport._HOOKS.incoming.myModule;
            delete Transport._HOOKS.incoming.myModule2;
            delete Transport._HOOKS.incoming.myModule3;
            delete Manifest.transport.incoming.myModule;
            delete Manifest.transport.incoming.myModule2;
            done();
        });
    });
});
