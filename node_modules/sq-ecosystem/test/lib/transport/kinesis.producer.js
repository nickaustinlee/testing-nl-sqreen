/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Shimmer = require('shimmer');

const SQSNodeProducerTransport = require('../../../lib/transport/sqs.producer');
const INTERFACES = require('../../../lib/enums').INTERFACES;

describe('sqs.producer', () => {

    it('should test sqs sendMessage', { plan: 2 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        iFace[INTERFACES.INSTRUMENTATION].strategies.wrap = function (holder, key, moduleIdentity, holderName, pre, post, asyncPost) {

            Shimmer.wrap(holder, key, (original) => {

                return function () {

                    pre && pre.method(arguments, undefined, undefined, this);
                    const args = arguments;

                    const last = arguments[arguments.length - 1];
                    arguments[arguments.length - 1] = function () {

                        asyncPost && asyncPost.method(args); // TODO: check args somedays;
                        return last.apply(this, arguments);
                    };
                    return original.apply(this, arguments);
                };
            });
        };
        iFace[INTERFACES.TRACING].getTracingIdentifier = function () {

            return 'ti';
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: ['host', 'ip', 'tracing_identifier', 'topic'],
                trigger: {}
            };
        };

        iFace[INTERFACES.TRANSPORT].propagate = function (resolved, trigger) {

            expect(trigger).to.equal({});
            expect(resolved).to.equal({
                host: '127.0.0.1',
                ip: '127.0.0.1',
                tracing_identifier: 'ti',
                topic: 'hello'
            });
            return function () {

                done();
            };
        };

        const module = {
            Kinesis: class {

                constructor() {

                    this.endpoint = {
                        hostname: '127.0.0.1'
                    };
                }
            }
        };

        SQSNodeProducerTransport({ module, identity: {}, request: 'aws-sdk' }, iFace);
        const prod = new module.Kinesis();

        module.Kinesis.prototype.putRecord = function (arg, cb) {

            return cb(null);
        };

        const recordParams = {
            Data : JSON.stringify({
                time : new Date(),
                message: 'hello world!'
            }),
            PartitionKey : 'hello',
            StreamName : 'world'
        };

        prod.putRecord(recordParams, () => {});
    });

    it('should test sqs sendMessage', { plan: 2 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        iFace[INTERFACES.INSTRUMENTATION].strategies.wrap = function (holder, key, moduleIdentity, holderName, pre, post, asyncPost) {

            Shimmer.wrap(holder, key, (original) => {

                return function () {

                    pre && pre.method(arguments, undefined, undefined, this);
                    const args = arguments;

                    const last = arguments[arguments.length - 1];
                    arguments[arguments.length - 1] = function () {

                        asyncPost && asyncPost.method(args); // TODO: check args somedays;
                        return last.apply(this, arguments);
                    };
                    return original.apply(this, arguments);
                };
            });
        };
        iFace[INTERFACES.TRACING].getTracingIdentifier = function () {

            return 'ti';
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: ['ip', 'tracing_identifier'],
                trigger: {}
            };
        };

        iFace[INTERFACES.TRANSPORT].propagate = function (resolved, trigger) {

            expect(trigger).to.equal({});
            expect(resolved).to.equal({
                ip: '127.0.0.1',
                tracing_identifier: 'ti'
            });
            return function () {

                done();
            };
        };

        const module = {
            Kinesis: class {

                constructor() {

                    this.endpoint = {
                        hostname: '127.0.0.1'
                    };
                }
            }
        };

        SQSNodeProducerTransport({ module, identity: {}, request: 'aws-sdk' }, iFace);
        const prod = new module.Kinesis();

        module.Kinesis.prototype.putRecord = function (arg, cb) {

            return cb(null);
        };

        const recordParams = {
            Data : JSON.stringify({
                time : new Date(),
                message: 'hello world!'
            }),
            PartitionKey : 'hello',
            StreamName : 'world'
        };

        prod.putRecord(recordParams, () => {});
    });

    it('should test sqs sendMessage', { plan: 0 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        iFace[INTERFACES.INSTRUMENTATION].strategies.wrap = function (holder, key, moduleIdentity, holderName, pre, post, asyncPost) {

            Shimmer.wrap(holder, key, (original) => {

                return function () {

                    pre && pre.method(arguments, undefined, undefined, this);
                    const args = arguments;

                    const last = arguments[arguments.length - 1];
                    arguments[arguments.length - 1] = function () {

                        asyncPost && asyncPost.method(args); // TODO: check args somedays;
                        return last.apply(this, arguments);
                    };
                    return original.apply(this, arguments);
                };
            });
        };
        iFace[INTERFACES.TRACING].getTracingIdentifier = function () {

            return 'ti';
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: [],
                trigger: {}
            };
        };

        const module = {
            Kinesis: class {

                constructor() {

                    this.endpoint = {
                        hostname: '127.0.0.1'
                    };
                }
            }
        };

        SQSNodeProducerTransport({ module, identity: {}, request: 'aws-sdk' }, iFace);
        const prod = new module.Kinesis();

        module.Kinesis.prototype.putRecord = function (arg, cb) {

            return cb(null);
        };

        const recordParams = {
            Data : JSON.stringify({
                time : new Date(),
                message: 'hello world!'
            }),
            PartitionKey : 'hello',
            StreamName : 'world'
        };

        prod.putRecord(recordParams, () => {});
        done();
    });
});
