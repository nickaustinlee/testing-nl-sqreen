/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Shimmer = require('shimmer');
const RedisClientTransport = require('../../../lib/transport/redis.client');
const INTERFACES = require('../../../lib/enums').INTERFACES;

describe('redis.client', () => {

    it('should patch the right method in the Redis Client class', { plan: 3 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        iFace[INTERFACES.INSTRUMENTATION].strategies.massWrap = function (mods, methods, pre) {

            Shimmer.massWrap(mods, methods, (orig) => {

                return function () {

                    pre(this, arguments);
                    return orig.apply(this, arguments);
                };
            });
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function (scope) {

            expect(scope).to.equal('client');
            return {
                fields: ['host', 'ip', 'tracing_identifier'],
                trigger: {}
            };
        };

        iFace[INTERFACES.TRACING].getTracingIdentifier = () => '1.1';

        iFace[INTERFACES.TRANSPORT].propagate = function (resolved, trigger) {

            expect(trigger).to.equal({});
            expect(resolved).to.equal({
                host: '127.0.0.1',
                ip: '127.0.0.1',
                tracing_identifier: '1.1'
            });

            return function () {

                done();
            };
        };

        const module = {
            RedisClient: class {
                constructor() {

                    this.connection_options = {
                        port: 6379,
                        host: '127.0.0.1',
                        family: 4
                    };
                }
                internal_send_command() {}
            }
        };
        RedisClientTransport({ module, identity: { version: '3.2.0' }, request: 'redis' }, iFace);
        RedisClientTransport({ module, identity: { version: '3.2.0' }, request: './lib' }, iFace);

        const cmd = {};
        const client = new module.RedisClient();
        client.internal_send_command(cmd);
        done();
    });

    it('should patch the right method in the Redis Client class', { plan: 3 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        iFace[INTERFACES.INSTRUMENTATION].strategies.massWrap = function (mods, methods, pre) {

            Shimmer.massWrap(mods, methods, (orig) => {

                return function () {

                    pre(this, arguments);
                    return orig.apply(this, arguments);
                };
            });
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function (scope) {

            expect(scope).to.equal('client');
            return {
                fields: ['transport'],
                trigger: {}
            };
        };

        iFace[INTERFACES.TRACING].getTracingIdentifier = () => '1.1';

        iFace[INTERFACES.TRANSPORT].propagate = function (resolved, trigger) {

            expect(trigger).to.equal({});
            expect(resolved).to.equal({
                transport: 'redis'
            });

            return function () {

                done();
            };
        };

        const module = {
            RedisClient: class {
                constructor() {

                    this.connection_options = {
                        port: 6379,
                        host: '127.0.0.1',
                        family: 4
                    };
                }
                internal_send_command() {}
            }
        };
        RedisClientTransport({ module, identity: { version: '3.2.0' }, request: 'redis' }, iFace);
        RedisClientTransport({ module, identity: { version: '2.0.0' }, request: 'redis' }, iFace);

        const cmd = {
            callback: function () {}
        };
        const client = new module.RedisClient();
        client.internal_send_command(cmd);
        cmd.callback();
    });

    it('should patch the right method in the Redis Client class', { plan: 1 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        iFace[INTERFACES.INSTRUMENTATION].strategies.massWrap = function (mods, methods, pre) {

            Shimmer.massWrap(mods, methods, (orig) => {

                return function () {

                    pre(this, arguments);
                    return orig.apply(this, arguments);
                };
            });
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function (scope) {

            expect(scope).to.equal('client');
            return {
                fields: [],
                trigger: {}
            };
        };

        const module = {
            RedisClient: class {
                constructor() {

                    this.connection_options = {
                        port: 6379,
                        host: '127.0.0.1',
                        family: 4
                    };
                }
                internal_send_command() {}
            }
        };
        RedisClientTransport({ module, identity: { version: '3.2.0' }, request: 'redis' }, iFace);
        RedisClientTransport({ module, identity: { version: '2.0.0' }, request: 'redis' }, iFace);

        const cmd = {
            callback: function () {}
        };
        const client = new module.RedisClient();
        client.internal_send_command(cmd);
        cmd.callback();
        done();
    });
});

