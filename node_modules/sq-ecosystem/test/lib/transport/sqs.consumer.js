/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const SQSNodeConsumerTransport = require('../../../lib/transport/sqs.consumer');
const INTERFACES = require('../../../lib/enums').INTERFACES;

describe('sqs.consumer', () => {

    it('should test sqs receiveMessage', { plan: 4 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        const b = {
            startCount() {

                expect(1).to.equal(1);
            },
            stopCount() {

                expect(1).to.equal(1);
            }
        };
        const s = new Map();

        iFace[INTERFACES.TRANSPORT].startIncomingTransaction = function (o, cb) {

            return cb(s, b);
        };

        iFace[INTERFACES.TRACING].getTracingIdentifier = function () {

            return 'ti';
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: ['host', 'ip', 'tracing_identifier'],
                trigger: {}
            };
        };

        iFace[INTERFACES.TRANSPORT].propagate = function (resolved, trigger) {

            expect(trigger).to.equal({});
            expect(resolved).to.equal({
                host: '127.0.0.1',
                ip: '127.0.0.1',
                tracing_identifier: 'ti'
            });
            return function () {

                throw new Error('should not be called');
            };
        };

        const module = {
            SQS: class {
            }
        };

        SQSNodeConsumerTransport({ module, identity: {}, request: 'aws-sdk' }, iFace);
        SQSNodeConsumerTransport({ module, identity: {}, request: 'aws-sdk3' }, iFace);
        const prod = new module.SQS();

        module.SQS.prototype.receiveMessage = function (params, cb) {

            try {
                return cb(null, { Messages: [{ }] });
            }
            catch (_) {}
        };

        prod.receiveMessage({
            QueueUrl: 'http://127.0.0.1:5244/queue/first-queue'
        });

        prod.receiveMessage({
            QueueUrl: 'http://127.0.0.1:5244/queue/first-queue'
        }, () => {

            done();
        });
    });

    it('should test sqs receiveMessage', { plan: 4 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        const b = {
            startCount() {

                expect(1).to.equal(1);
            },
            stopCount() {

                expect(1).to.equal(1);
            }
        };
        const s = new Map();

        iFace[INTERFACES.TRANSPORT].startIncomingTransaction = function (o, cb) {

            return cb(s, b);
        };

        iFace[INTERFACES.TRACING].getTracingIdentifier = function () {

            return 'ti';
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: ['ip', 'tracing_identifier', 'topic'],
                trigger: {}
            };
        };

        iFace[INTERFACES.TRANSPORT].propagate = function (resolved, trigger) {

            expect(trigger).to.equal({});
            expect(resolved).to.equal({
                ip: '127.0.0.1',
                tracing_identifier: 'ti',
                topic: 'first-queue'
            });
            return function () {

                throw new Error('should not be called');
            };
        };

        const module = {
            SQS: class {
            }
        };

        SQSNodeConsumerTransport({ module, identity: {}, request: 'aws-sdk' }, iFace);
        SQSNodeConsumerTransport({ module, identity: {}, request: 'aws-sdk3' }, iFace);
        const prod = new module.SQS();

        module.SQS.prototype.receiveMessage = function (params, cb) {

            try {
                return cb(null, { Messages: [{ }] });
            }
            catch (_) {}
        };


        prod.receiveMessage({
            QueueUrl: 'http://127.0.0.1/queue/first-queue'
        }, () => {

            done();
        });
    });

    it('should test sqs receiveMessage', { plan: 2 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        const b = {
            startCount() {

                expect(1).to.equal(1);
            },
            stopCount() {

                expect(1).to.equal(1);
            }
        };
        const s = new Map();

        iFace[INTERFACES.TRANSPORT].startIncomingTransaction = function (o, cb) {

            return cb(s, b);
        };

        iFace[INTERFACES.TRACING].getTracingIdentifier = function () {

            return 'ti';
        };

        iFace[INTERFACES.TRANSPORT].shouldPropagate = function () {

            return {
                fields: [],
                trigger: {}
            };
        };

        const module = {
            SQS: class {
            }
        };

        SQSNodeConsumerTransport({ module, identity: {}, request: 'aws-sdk' }, iFace);
        SQSNodeConsumerTransport({ module, identity: {}, request: 'aws-sdk3' }, iFace);
        const prod = new module.SQS();

        module.SQS.prototype.receiveMessage = function (params, cb) {

            try {
                return cb(null, { Messages: [{ }] });
            }
            catch (_) {}
        };


        prod.receiveMessage({
            QueueUrl: 'http://127.0.0.1/queue/first-queue'
        }, () => {

            done();
        });
    });

    it('should test sqs receiveMessage', { plan: 0 }, (done) => {

        const iFace = require('../../test_utils/').getEcosystemMock();

        const module = {
            SQS: class {
            }
        };

        SQSNodeConsumerTransport({ module, identity: {}, request: 'aws-sdk' }, iFace);
        const prod = new module.SQS();

        module.SQS.prototype.receiveMessage = function (params, cb) {

            try {
                return cb(new Error());
            }
            catch (_) {}
        };


        prod.receiveMessage({
            QueueUrl: 'http://127.0.0.1/queue/first-queue'
        }, () => {

            done();
        });
    });

});
