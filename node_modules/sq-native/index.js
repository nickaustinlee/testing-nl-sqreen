'use strict'; // FIXME copyright
const Binary = require('binary-downloader');
const PackageJSON = require('./package.json');
const binding_path = Binary.getPath(PackageJSON.binary);
const Binding = require(binding_path);

module.exports = class {

    constructor(id, rule) {

        this.isInit = true;
        this.id = id;
        try {
            Binding.powerwaf_initializePowerWAF(id, rule);
        }
        catch (e) {
            this.isInit = false;
            e.args = [id, rule];
            throw e;
        }
    }

    run(params, budget) {

        if (this.isInit !== true) {
            throw new Error('libSqreen has not been init properly.');
        }
        let res;
        try {
            res = Binding.powerwaf_run(this.id, params, budget); // TODO: measure binding costs too
        }
        catch (e) {
            e.waf = {
                args: [this.id, params, budget]
            };
            throw e;
        }
        if (!res) {
            return {};
        }

        if (res.status === 'error') {
            const err = new Error('runPowerWAF returned an error');
            err.waf = res;
            if (res.error_code === Binding.PW_ERR_INVALID_CALL) {
                err.waf.args = [this.id, params, budget];
            }
            err.waf.waf_rule = this.id;
            delete err.waf.status;
            throw err;
        }


        const ret = {};
        if (res.data) {
            ret.record = {
                waf_data: res.data
            };
        }
        if (res.status) {
            ret.status = res.status;
        }
        return ret;
    }

    static getVersion() {

        const version = Binding.powerwaf_get_version();
        return `${version.major}.${version.minor}.${version.patch}`;
    }

    static clearAll() {

        return Binding.powerwaf_clearAll();
    }
};

module.exports.PW_ERR_INVALID_CALL = Binding.PW_ERR_INVALID_CALL;
