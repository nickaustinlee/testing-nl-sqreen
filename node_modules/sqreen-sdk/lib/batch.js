'use strict';
const Backend = require('./backend');

module.exports = class Batch {

    static _report(batch) {

        return Backend.reportBatch(batch);
    }

    /**
     *
     * @param {number} maxSize
     * @param {number} maxAgeS
     */
    constructor(maxSize, maxAgeS) {

        this.data = [];
        this.maxSize = maxSize;
        this.maxAgeMS = maxAgeS * 1000;
        this.timeOut = null;
        this.setTimeout();
    }

    clear() {

        clearTimeout(this.timeOut);
    }

    setTimeout() {

        clearTimeout(this.timeOut);
        this.timeOut = setTimeout(() => {

            this.report();
        }, this.maxAgeMS);
        try {
            this.timeOut.unref();
        }
        catch (_) {}
    }

    report() {

        this.setTimeout();
        if (this.data.length === 0) {
            return Promise.resolve();
        }

        const toReport = this.data;
        this.data = [];
        return Batch._report(toReport)
            .catch((_) => {

                for (let i = 0; i < toReport.length; ++i) {
                    if (this.data.length >= this.maxSize) {
                        break;
                    }
                    this.data.push(toReport[i]);
                }
            });
    }

    checkReport() {

        if (this.data.length >= this.maxSize) {
            this.report();
        }
    }

    add(signal) {

        this.data.push(signal);
        this.checkReport();
    }

    addMultiple(signalList) {

        for (let i = 0; i < signalList.length; ++i) {
            this.data.push(signalList[i]);
        }
        this.checkReport();
    }
};
