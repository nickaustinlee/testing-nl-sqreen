'use strict';
const test = require('tape');

const BackendOld = require('../lib/backend');
const Errors = require('../lib/errors');

const MockAdapter = require('axios-mock-adapter');
const Axios = require('axios');

let mock;
const beforeEach = function () {
    mock = new MockAdapter(Axios);
    BackendOld.setSessionKey('');
    BackendOld.setAPIKey('');
};

beforeEach();
test('Backend: set a session key', (t) => {
    t.plan(1);
    BackendOld.setSessionKey('hello');
    BackendOld.setAPIKey('');

    t.deepEqual(BackendOld._getHeaders(), { 'x-session-key': 'hello' });
    BackendOld.setSessionKey('');
    t.end();
});

beforeEach();
test('Backend: fail to report a signal because of auth', (t) => {
    t.plan(1);
    BackendOld.setAPIKey('token');
    mock.onPost(/.*/).reply(401, {});

    return BackendOld.reportSignal()
        .catch((error) => {

            t.ok(error instanceof Errors.AuthenticationError);
            t.end();
        });
});

beforeEach();
test('should fail to report a signal because of malformed data', (t) => {
    t.plan(2);
    BackendOld.setAPIKey('token');
    mock.onPost(/.*/).reply(422, { message: 'nothing here' });

    return BackendOld.reportSignal()
        .catch((error) => {

            t.ok(error instanceof Errors.InvalidSignalError);
            t.equal(error.message, 'nothing here');
            t.end();
        });
});

test('should fail to report an unknown error', (t) => {
    t.plan(2);
    BackendOld.setAPIKey('token');
    mock.onPost(/.*/).networkError();

    return BackendOld.reportSignal()
        .catch((error) => {

            t.ok(error instanceof Errors.UnknownError);
            t.equal(error.message, '"Network Error"');
            t.end();
        });
});
