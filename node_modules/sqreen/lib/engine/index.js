'use strict';
const Engine = require('./engine');

const manager = new Engine.SubscriptionManager();
Engine.Span.setManager(manager);

module.exports.subscribe = function (fields, callback) {

    const group = Engine.SubscriptionGroup.getOrCreateSubscriptionGroup(fields);
    group.addCB(callback);
    manager.addGroup(group);
};

/**
 *
 * @param {{ fields: string[], callback: function }[]} unSubSubscriptionArray
 */
module.exports.unSubScribe = function (unSubSubscriptionArray) {

    const groupsToRemove = new Set();
    unSubSubscriptionArray.forEach((item) => {

        const group = Engine.SubscriptionGroup.getSubscriptionGroup(item.fields);
        if (group) {
            group.removeCB(item.callback);
            if (group.hasCallbacks() === false) {
                groupsToRemove.add(group);
            }
        }
    });
    manager.removeGroupSet(groupsToRemove);
};

// let's create the root span
// this must be the only call to new on Span class
const rootSpan = new Engine.Span([]);
rootSpan
    .setValue('agent_version', require('../../version.json').version);

module.exports.createSpanFromRoot = function () {

    return rootSpan.createChild();
};

module.exports.removeAllSubscriptions = function () {

    manager.removeAllGroups();
    Engine.SubscriptionGroup.current = new Map();
};

/**
 * @return {Set<string>}
 */
module.exports.getNeededFieldSet = function () {

    return manager.allKeys;
};
