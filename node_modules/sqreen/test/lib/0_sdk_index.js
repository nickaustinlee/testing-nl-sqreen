/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';

// needs to run first.

const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const SDK = require('../../lib/sdk');
const Director = require('../../lib/instrumentation/sqreenDirector');
const Record = require('../../lib/instrumentation/record');
let NS = require('../../lib/instrumentation/hooks/util').getNS();

const Express = require('express');
const Request = require('supertest');

const Budget = require('../../lib/instrumentation/budget');

const INFINITY = Budget.INFINITY;
const ZERO = Budget.ZERO;
const beforeEach = lab.beforeEach;
const afterEach = lab.afterEach;

/**
 *
 * @param {RecordTrace} record
 * @return {[Point]}
 */
const getSDK = (record) => record.data.filter((x) => x.signal_name.indexOf('sq.sdk.') === 0);

require('../../lib/command/features').featureHolder.use_signals = true;
describe('SDK', () => {


    beforeEach((done) => {

        Budget.ZERO = INFINITY;
        done();
    });

    afterEach((done) => {

        Budget.ZERO = ZERO;
        done();
    });

    describe('auth', () => {

        describe('_getPatchedMethod', () => {

            it('should return a patchedMethod', { plan: 2 },  (done) => {

                const method = SDK._getPatchedMethod('aaa', 'bbb');

                expect(method).to.be.a.function();
                expect(Director._getInstrumented()['sqreen-sdk']['']['']['bbb:aaa']).to.be.an.array();
                done();
            });
        });

        describe('auth_track', () => {

            it('should update the user in the RR yes', { plan: 1 }, (done) => {

                const req = { aaa: 'aaa' };
                const record = Record.lazyGet(req);

                SDK.auth_track(req, true, { username: 'hello' });

                expect(record.user).to.equal({ username: 'hello' });
                done();
            });

            it('should update the user in the RR yes', { plan: 0 }, (done) => {

                SDK.auth_track(null, true, { username: 'hello' });
                SDK.auth_track(undefined, true, { username: 'hello' });

                done();
            });

            it('should trigger the callback on the auth sdk', { plan: 2 }, (done) => {

                Director._getInstrumented()['sqreen-sdk']['']['']['auth:auth_track'][0]({
                    preCbs: [
                        {
                            method: function (args) {

                                expect(args[0]).to.be.true();
                                expect(args[1]).to.equal({ a: 1 });
                                done();
                            }
                        }
                    ]
                });

                SDK.auth_track(true, { a: 1 });
            });

            it('should trigger the callback on the auth sdk', { plan: 2 }, (done) => {

                Director._getInstrumented()['sqreen-sdk']['']['']['auth:auth_track'][0]({
                    preCbs: [
                        {
                            method: function (args) {

                                expect(args[0]).to.be.false();
                                expect(args[1]).to.not.exist();
                                done();
                            }
                        }
                    ]
                });

                SDK.auth_track('');
            });
        });

        describe('signup_track', () => {

            it('should trigger the callback on the auth sdk', { plan: 1 }, (done) => {

                Director._getInstrumented()['sqreen-sdk']['']['']['signup:signup_track'][0]({
                    preCbs: [
                        {
                            method: function (args) {

                                expect(args[0]).to.equal({ a: 1 });
                                done();
                            }
                        }
                    ]
                });

                SDK.signup_track({ a: 1 });
            });
        });

        describe('identify', () => {

            it('should refuse a to operate if there is no proper reques', { plan: 2 }, (done) => {

                expect(SDK.identify(null)).to.be.false();
                expect(SDK.identify('')).to.be.false();
                done();
            });

            it('should create a new record and add auth session', { plan: 8 }, (done) => {

                require('../../lib/command/features').featureHolder.use_signals = true;
                const req = { __sqreen_uuid: 10, headers: { 'x-forwarded-for': '156.22.6.6' } };
                const res = SDK.identify(req, { hello: 'world' }, 'b');
                expect(res).to.be.true();

                expect(Record.lazyGet()).to.not.exist();
                const record = Record.STORE.get(req);
                expect(Record.lazyGet(req)).to.equal(record);
                expect(record).to.exist();
                expect(record.data).to.have.length(0);

                expect(record.actor.ip_addresses).to.equal(['156.22.6.6']);
                expect(record.actor.identifiers).to.equal({ hello: 'world' });
                expect(record.actor.traits).to.equal('b');

                done();

            });
        });
    });

    describe('events', () => {

        describe('track', () => {


            it('should track a custom event and provide a stacktrace', { plan: 3 }, (done) => {

                const Command = require('../../lib/command/index');

                Command.execute({
                    name: 'record_stacktrace',
                    params: ['hello'],
                    uuid: '1'
                });

                const date = new Date();
                const req = { __sqreen_uuid: 1 };
                SDK.track('hello', {
                    request: req,
                    timestamp: date,
                    extra_field: 'we will we will warn you'
                });

                SDK.track('hello2', {
                    request: req,
                    timestamp: date
                });


                const record = Record.lazyGet(req);

                const sdk = getSDK(record);
                expect(sdk).to.have.length(2);
                expect(sdk[0].payload.stacktrace).to.exist();
                expect(sdk[1].payload.stacktrace).to.not.exist();
                done();
            });

            it('should track a custom event and find req in CLS', { plan: 2 }, (done) => {

                delete process.sqreen_namespaces.sqreen_session;
                NS = require('../../lib/instrumentation/hooks/util').getNS();
                NS.run(() => {

                    const req = { __sqreen_uuid: 1 };
                    NS.set('req', req);
                    SDK.track('hello');

                    const record = Record.lazyGet(req);
                    const sdk = getSDK(record);
                    expect(sdk).to.have.length(1);
                    expect(sdk[0].signal_name).to.equal('sq.sdk.hello');

                    done();
                });
            });

            it('should track a custom event and find req in CLS and collect payload', { plan: 3 }, (done) => {

                delete process.sqreen_namespaces.sqreen_session;
                NS = require('../../lib/instrumentation/hooks/util').getNS();
                NS.run(() => {

                    const req = { __sqreen_uuid: 1 };
                    NS.set('req', req);
                    SDK.track('hello', { collect_body: true });

                    const record = Record.lazyGet(req);
                    const sdk = getSDK(record);
                    expect(sdk).to.have.length(1);
                    expect(sdk[0].signal_name).to.equal('sq.sdk.hello');
                    expect(record._meta.reportPayload).to.equal(true);

                    done();
                });
            });

            it('should track a custom event and find req in CLS and remove properties', { plan: 9 }, (done) => {

                delete process.sqreen_namespaces.sqreen_session;
                NS = require('../../lib/instrumentation/hooks/util').getNS();
                NS.run(() => {

                    const req = { __sqreen_uuid: 1 };
                    NS.set('req', req);

                    const prop = {};
                    for (let i = 0; i < 16; ++i) {
                        prop[String.fromCharCode(65 + i)] = String.fromCharCode(65 + i);
                    }

                    SDK.track('hello1', {});
                    SDK.track('hello2', { properties: {} });
                    SDK.track('hello3', { properties: prop });

                    expect(prop[String.fromCharCode(65 + 15)]).to.exist();

                    prop.Z = 'Z';

                    SDK.track('hello4', { properties: prop });
                    SDK.track('hello5');

                    expect(prop.Z).to.equal('Z');


                    const record = Record.lazyGet(req);
                    const sdk = getSDK(record);

                    expect(sdk).to.have.length(5);
                    expect(sdk[0].signal_name).to.equal('sq.sdk.hello1');
                    expect(sdk[1].signal_name).to.equal('sq.sdk.hello2');
                    expect(sdk[2].signal_name).to.equal('sq.sdk.hello3');
                    expect(sdk[2].payload.properties).to.have.length(16);
                    expect(sdk[3].signal_name).to.equal('sq.sdk.hello4');
                    expect(sdk[3].payload.properties.Z).to.not.exist();

                    done();
                });
            });

            it('should track a custom event but update its name', { plan: 2 }, (done) => {

                const req = { __sqreen_uuid: 1 };
                const res = SDK.track('sq.hello', {
                    request: req
                });

                expect(res).to.be.false();

                const record = Record.lazyGet(req);
                const sdk = getSDK(record);
                expect(sdk).to.have.length(0);
                done();
            });

            it('should not track a custom event but update its name', { plan: 1 }, (done) => {

                try {
                    NS.set('req', undefined);
                }
                catch (_) {}
                const res = SDK.track('hello', {
                    request: undefined
                });

                expect(res).to.be.false();

                done();
            });

            it('should fail to track a custom event because request is wrong', { plan: 2 }, (done) => {

                const req = null;
                const res = SDK.track('sq.hello', {
                    request: req
                });

                const record = Record.lazyGet(req);

                expect(res).to.be.false();
                expect(record).to.not.exist();

                done();
            });

            it('should throw if used with bad arguments', { plan: 2 }, (done) => {

                try {
                    SDK.track({});
                }
                catch (e) {
                    expect(e instanceof TypeError).to.be.true();
                }

                try {
                    SDK.track('', { timestamp: '' });
                }
                catch (e) {
                    expect(e instanceof TypeError).to.be.true();
                }
                done();
            });

        });

        describe('express integration', () => {

            it('should expose the sdk in req', { plan: 17 }, (done) => {

                process.env.SQREEN_TOKEN = 'a';
                const app = Express();

                let request;

                app.use(SDK.middleware);
                app.get('/', (req, res) => {

                    expect(req.sqreen).to.exist();
                    expect(req.sqreen.identify).to.exist();
                    expect(req.sqreen.signup_track).to.be.a.function();
                    expect(req.sqreen.auth_track).to.be.a.function();
                    expect(req.sqreen.track).to.exist();

                    req.sqreen.signup_track({ email: 'admin@sqreen.com' });
                    req.sqreen.identify({ username: 'admin' });
                    req.sqreen.track('login');
                    req.sqreen.track('login-admin', { user_identifiers: { username: 'vlad' } });
                    req.sqreen.track('login-admin', { user_identifiers: { username: 'admin' } });

                    request = req;

                    res.end('ok');
                });

                Request(app)
                    .get('/')
                    .expect(200)
                    .end((err, res) => {

                        expect(err).to.not.exist();
                        expect(res.text).to.equal('ok');

                        const record = Record.lazyGet(request);
                        const sdk = getSDK(record);

                        expect(record).to.exist();
                        record.close(request, null, null, { statusCode: 200, getHeaders: () => ({ 'Content-Type': 'aaa', 'Content-Length': 10 }) });

                        expect(sdk).to.have.length(3);
                        expect(sdk[0].source).to.equal('sqreen:sdk:track');
                        expect(sdk[0].signal_name).to.equal('sq.sdk.login');
                        expect(sdk[0].payload.user_identifiers).to.not.exist();
                        expect(sdk[1].signal_name).to.equal('sq.sdk.login-admin');
                        expect(sdk[1].payload.user_identifiers).to.equal({ username: 'vlad' });
                        expect(sdk[2].signal_name).to.equal('sq.sdk.login-admin');
                        expect(sdk[2].payload.user_identifiers).to.equal({ username: 'admin' });

                        process.env.SQREEN_TOKEN = undefined;
                        done();
                    });
            });

        });

    });
});
