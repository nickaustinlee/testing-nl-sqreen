/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Actions = require('../../../lib/actions/index');
const Record = require('../../../lib/instrumentation/record');

describe('Actions', () => {

    it('should prevent to add null', { plan: 1 }, (done) => {

        Actions.init();
        const list = Actions.enforceActionList(null);
        expect(list).to.equal([]);
        done();
    });

    it('should test that timeouts are removed', { timeout: 5000, plan: 1 }, (done) => {

        const IP = '199.234.44.01';
        Actions.enforceActionList([{ action: 'block_ip', action_id: '00', duration: 1, parameters: { 'ip_cidr':[IP] } }]);
        Actions.enforceActionList([{ action: 'block_ip', action_id: '01', duration: 20, parameters: { 'ip_cidr':[IP] } }]);
        setTimeout(() => {

            expect(Actions._ipStore.route(IP)).to.exist();
            done();
        }, 2000);
    });

    it('should test timeout', { timeout: 5000, plan: 2 }, (done) => {

        const IP = '199.234.44.01';
        Actions.enforceActionList([{ action: 'block_ip',action_id: '00','duration':1,'parameters': { 'ip_cidr':[IP] } }]);
        expect(Actions._ipStore.route(IP)).to.exist();
        setTimeout(() => {

            expect(Actions._ipStore.route(IP)).to.not.exist();
            done();
        }, 2000);
    });

    it('should prevent to add too many actions', { plan: 1 }, (done) => {

        Actions.init();
        const randomIP = function () {

            return [Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255), Math.floor(Math.random() * 255)].join('.');
        };
        const list = Actions.enforceActionList([{ action_id: 1, action: 'block_ip', parameters: { ip_cidr: new Array(1e4 + 10).fill(0).map((_) => randomIP()) } }]);
        expect(list).to.not.be.empty();
        done();
    });

    it('should be reliabe when ipstore is polluted', { plan: 4 }, (done) => {

        Actions.init();
        Actions._ipStore.insert('102.44.76.44', null);
        Actions._ipStore.insert('102.44.76.49', 'eedee');
        Actions._ipStore.insert('102.44.76.50', 25354);
        expect(Actions.shouldLetThisGo({}, {}, '102.44.76.44')).to.be.true();
        expect(Actions.shouldLetThisGo({}, {}, '')).to.be.true();
        expect(Actions.shouldLetThisGo({}, {}, '102.44.76.49')).to.be.true();
        expect(Actions.shouldLetThisGo({}, {}, '102.44.76.50')).to.be.true();
        done();
    });

    it('should enforce a blocking IP action with arrays', { plan: 9 }, (done) => {

        Actions.init();

        const getReqRes = function () {

            const req = {
                socket: {
                    end() {}
                }
            };
            const res = {
                end() {},
                writeHead(code) {

                    expect(code).to.equal(500);
                }
            };
            return { req, res };
        };

        const req = getReqRes().req;
        const res = getReqRes().res;

        const list = Actions.enforceActionList([{ action_id: 1, action: 'block_ip', parameters: { ip_cidr: ['192.168.0.0/24'] } }]);

        expect(list).to.have.length(0);
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.false();

        const list2 = Actions.enforceActionList([{ action_id: 1, action: 'block_ip', parameters: { ip_cidr: ['192.167.0.1/24'] } }]);

        expect(list2).to.have.length(0);
        expect(Actions.shouldLetThisGo(getReqRes().req, getReqRes().res, '192.168.0.50')).to.be.true();


        const record = Record.lazyGet(req);

        expect(record.data).to.have.length(1);
        const track = record.data[0];

        expect(track.source).to.equal('sqreen:sdk:track');
        expect(track.signal_name).to.equal('sq.action.block_ip');
        expect(track.payload.properties).to.equal({
            action_id: 1,
            output: {
                ip_address: '192.168.0.50'
            }
        });

        done();
    });

    it('should enforce a blocking IP action', { plan: 10 }, (done) => {

        Actions.init();

        const getReqRes = function () {

            const req = {
                socket: {
                    end() {}
                }
            };
            const res = {
                end() {},
                writeHead(code) {

                    expect(code).to.equal(500);
                }
            };
            return { req, res };
        };
        const req = getReqRes().req;
        const res = getReqRes().res;

        const list = Actions.enforceActionList([{ action_id: 1, action: 'block_ip', parameters: { ip_cidr: '192.168.0.1/24' } }]);

        expect(list).to.have.length(0);
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.false();

        const list2 = Actions.enforceActionList([{ action_id: 1, action: 'block_ip', parameters: { ip_cidr: '192.167.0.1/24' } }]);

        expect(list2).to.have.length(0);
        expect(Actions.shouldLetThisGo(getReqRes().req, getReqRes().res, '192.168.0.50')).to.be.true();


        const record = Record.lazyGet(req);

        expect(record.data).to.have.length(1);
        const track = record.data[0];
        expect(record.data).to.have.length(1);

        expect(track.source).to.equal('sqreen:sdk:track');
        expect(track.signal_name).to.equal('sq.action.block_ip');
        expect(track.payload.properties).to.equal({
            action_id: 1,
            output: {
                ip_address: '192.168.0.50'
            }
        });

        done();
    });

    it('should enforce a blocking IP action for 2 seconds', { plan: 8, timeout: 5000 }, (done) => {

        Actions.init();

        const req = {
            socket: {
                end() {}
            }
        };
        const res = {
            end() {},
            writeHead(code) {

                expect(code).to.equal(500);
            }
        };

        const list = Actions.enforceActionList([{ action_id: 1, action: 'block_ip', parameters: { ip_cidr: '192.168.0.1/24' }, duration: 2 }]);

        expect(list).to.have.length(0);
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.false();


        setTimeout(() => {

            expect(Actions.shouldLetThisGo({}, res, '192.168.0.50')).to.be.true();


            const record = Record.lazyGet(req);

            expect(record.data).to.have.length(1);
            const track = record.data[0];

            expect(track.source).to.equal('sqreen:sdk:track');
            expect(track.signal_name).to.equal('sq.action.block_ip');
            expect(track.payload.properties).to.equal({
                action_id: 1,
                output: {
                    ip_address: '192.168.0.50'
                }
            });
            done();
        }, 3000);
    });

    it('should fail at calling shouldLetThisGo', { plan: 1 }, (done) => {

        const ProxyQuire = require('proxyquire');
        const MockedActions = ProxyQuire('../../../lib/actions/index', {
            '../exception': {
                report(e) {

                    expect(e).to.exist();
                    done();
                    return Promise.resolve();
                }
            }
        });
        try {
            MockedActions.shouldLetThisGo(null, null, '192.133.222.144:8080');
        }
        catch (e) {
            return done(e);
        }
    });

    it('should enforce a redirect IP action', { plan: 16, timeout: 4000 }, (done) => {

        Actions.init();

        const req = {
            socket: {
                end() {}
            }
        };
        const res = {
            end() {},
            writeHead(code, headers) {

                expect(code).to.equal(303);
                expect(headers.Location).to.equal('https://google.com');
            }
        };

        const req2 = {
            socket: {
                end() {}
            }
        };
        const res2 = {
            end() {},
            writeHead(code, headers) {

                expect(code).to.equal(303);
                expect(headers.Location).to.equal('https://google.com');
            }
        };

        const list = Actions.enforceActionList([
            { action_id: 1, action: 'redirect_ip', parameters: { ip_cidr: '192.168.0.50', url: 'https://google.com' }, duration: 2 },
            { action_id: 1, action: 'redirect_ip', parameters: { ip_cidr: '192.168.0.50' }, duration: 2 },
            { action_id: 1, action: 'redirect_ips', parameters: { ip_cidr: '192.168.0.1/24', url: 'https://google.com' } }
        ]);

        expect(list).to.have.length(2);
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.false();
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.false();
        res.__original_end = function () {};
        expect(Actions.shouldLetThisGo(req2, res2, '192.168.0.50')).to.be.false();

        setTimeout(() => {

            expect(Actions.shouldLetThisGo({}, res, '192.168.0.50')).to.be.true();

            const list2 = Actions.enforceActionList([{ action_id: 1, action: 'redirect_ip', parameters: { ip_cidr: '192.167.0.1/24', url: 'https://google.com' } }]);

            expect(list2).to.have.length(0);
            expect(Actions.shouldLetThisGo({}, res, '192.168.0.50')).to.be.true();

            const record = Record.lazyGet(req);
            const record2 = Record.lazyGet(req2);

            expect(record.data).to.have.length(1);
            expect(record2.data).to.have.length(1);
            const track = record.data[0];

            expect(track.source).to.equal('sqreen:sdk:track');
            expect(track.signal_name).to.equal('sq.action.redirect_ip');
            expect(track.payload.properties).to.equal({
                action_id: 1,
                output: {
                    ip_address: '192.168.0.50'
                }
            });
            done();
        }, 3000);
    });

    it('should enforce a redirect IP action with arrays', { plan: 17, timeout: 4000 }, (done) => {

        Actions.init();

        const req = {
            socket: {
                end() {}
            }
        };
        const res = {
            end() {},
            writeHead(code, headers) {

                expect(code).to.equal(303);
                expect(headers.Location).to.equal('https://google.com');
            }
        };

        const req2 = {
            socket: {
                end() {}
            }
        };
        const res2 = {
            end() {},
            writeHead(code, headers) {

                expect(code).to.equal(303);
                expect(headers.Location).to.equal('https://google.com');
            }
        };

        const list = Actions.enforceActionList([
            { action_id: 1, action: 'redirect_ip', parameters: { ip_cidr: ['192.168.0.50'], url: 'https://google.com' }, duration: 2 },
            { action_id: 1, action: 'redirect_ip', parameters: { ip_cidr: ['192.168.0.50'] }, duration: 2 },
            { action_id: 1, action: 'redirect_ips', parameters: { ip_cidr: ['192.168.0.1/24'], url: 'https://google.com' } }
        ]);

        expect(list).to.have.length(2);
        expect(Actions.shouldLetThisGo(req, res, '192.168.0.50')).to.be.false();
        res.__original_end = function () {};
        expect(Actions.shouldLetThisGo(req2, res2, '192.168.0.50')).to.be.false();

        setTimeout(() => {

            expect(Actions.shouldLetThisGo({}, res, '192.168.0.50')).to.be.true();
            expect(Actions.shouldLetThisGo({}, res, '4444rrr$$#')).to.be.true();
            expect(Actions.shouldLetThisGo({}, res, '::121')).to.be.true();

            const list2 = Actions.enforceActionList([{ action_id: 1, action: 'redirect_ip', parameters: { ip_cidr: ['192.167.0.1/24'], url: 'https://google.com' } }]);

            expect(list2).to.have.length(0);
            expect(Actions.shouldLetThisGo({}, res, '192.168.0.50')).to.be.true();

            const record = Record.lazyGet(req);
            const record2 = Record.lazyGet(req2);

            expect(record.data).to.have.length(1);
            expect(record2.data).to.have.length(1);
            const track = record.data[0];

            expect(track.source).to.equal('sqreen:sdk:track');
            expect(track.signal_name).to.equal('sq.action.redirect_ip');
            expect(track.payload.properties).to.equal({
                action_id: 1,
                output: {
                    ip_address: '192.168.0.50'
                }
            });
            done();
        }, 3000);
    });
});
