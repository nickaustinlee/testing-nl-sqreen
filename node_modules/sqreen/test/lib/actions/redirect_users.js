/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Actions = require('../../../lib/actions/index');
const SDK = require('../../../lib/sdk');
const Record = require('../../../lib/instrumentation/record');

describe('Actions', () => {

    describe('REDIRECT USERS', () => {

        it('should refuse malformed actions', { plan: 1 }, (done) => {

            Actions.init();
            const errors = Actions.enforceActionList([
                {
                    action_id: 999,
                    duration: 6000,
                    action: 'redirect_user',
                    parameters: {}
                },
                {
                    action_id: 1492,
                    action: 'redirect_user',
                    parameters: {
                        users: {}
                    }
                },
                {
                    action_id: 1515,
                    action: 'redirect_user',
                    parameters: {
                        users: []
                    }
                }
            ]);
            expect(errors).to.equal([999, 1492, 1515]);
            done();
        });

        it('should add a user to redirect and redirect it with duration', { plan: 8 }, (done) => {

            Actions.init();
            const errors = Actions.enforceActionList([
                {
                    action_id: 999,
                    action: 'redirect_user',
                    parameters: {
                        url: 'http://target.com',
                        users: [
                            {
                                username: 'toto',
                                id: 42
                            },
                            {
                                userId: 'daskihjabhds2343kh23'
                            }
                        ]
                    },
                    duration: 1
                }
            ]);

            expect(errors).to.have.length(0);

            const getReq = function (toEnd) {

                return {
                    socket: {
                        end: () => {

                            if (!toEnd) {
                                done(new Error('should not have been ended'));
                            }
                        }
                    },
                    __sqreen_res: {
                        writeHead: () => {

                            if (!toEnd) {
                                done(new Error('should not have been ended'));
                            }
                        },
                        end: () => {

                            if (!toEnd) {
                                done(new Error('should not have been ended'));
                            }
                        }
                    }
                };
            };
            const req1 = getReq(true);

            SDK.identify(req1, { username: 'toto', id: 42 });
            expect(SDK.userIsBanned(req1)).to.be.true();
            const record1 = Record.lazyGet(req1);
            expect(record1.data[0].source).to.equal('sqreen:sdk:track');

            expect(record1.data[0].signal_name).to.equal('sq.action.redirect_user');
            expect(record1.data[0].payload.properties).to.equal({ action_id: 999, output: { username:'toto', id: 42 } });

            const req2 = getReq(false);

            SDK.identify(req2, { username: 'toto', id: 42, role: 'admin' });
            expect(SDK.userIsBanned(req2)).to.be.false();

            expect(SDK.userIsBanned()).to.be.false();
            expect(SDK.userIsBanned({})).to.be.false();

            done();
        });

        it('should add a user to redirect and redirect it', { plan: 8 }, (done) => {

            Actions.init();
            const errors = Actions.enforceActionList([
                {
                    action_id: 999,
                    action: 'redirect_user',
                    parameters: {
                        url: 'https://google.com',
                        users: [
                            {
                                username: 'toto',
                                id: 42
                            }
                        ]
                    }
                }
            ]);

            expect(errors).to.have.length(0);

            const getReq = function (toEnd) {

                return {
                    socket: {
                        end: () => {

                            if (!toEnd) {
                                done(new Error('should not have been ended'));
                            }
                        }
                    },
                    __sqreen_res: {
                        writeHead: () => {

                            if (!toEnd) {
                                done(new Error('should not have been ended'));
                            }
                        },
                        end: () => {

                            if (!toEnd) {
                                done(new Error('should not have been ended'));
                            }
                        }
                    }
                };
            };
            const req1 = getReq(true);

            SDK.identify(req1, { username: 'toto', id: 42 });
            expect(SDK.userIsBanned(req1)).to.be.true();
            const record1 = Record.lazyGet(req1);
            expect(record1.data[0].source).to.equal('sqreen:sdk:track');

            expect(record1.data[0].signal_name).to.equal('sq.action.redirect_user');
            expect(record1.data[0].payload.properties).to.equal({ action_id: 999, output: { username:'toto', id: 42 } });

            const req2 = getReq(false);

            SDK.identify(req2, { username: 'toto', id: 42, role: 'admin' });
            expect(SDK.userIsBanned(req2)).to.be.false();

            expect(SDK.userIsBanned()).to.be.false();
            expect(SDK.userIsBanned({})).to.be.false();

            done();
        });
    });
});
