/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Metric = require('../../../lib/metric');
const Feature = require('../../../lib/command/features');
const HEALTH = require('../../../lib/enums/metrics').HEALTH;
const Health = require('../../../lib/agent/health');

const SqreenSDK = require('sqreen-sdk');

describe('health', () => {

    describe('avg load', () => {

        it('should collect the avg load of the system', { plan: 22 }, (done) => {

            Feature.featureHolder.use_signals = true;
            SqreenSDK.initBatch(10000, 100000, () => Promise.resolve());

            expect(Health._hasLoop()).to.be.false();
            Health.startLoop(0);
            expect(Health._hasLoop()).to.be.false();

            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_1)).to.not.exist();
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_5)).to.not.exist();
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_15)).to.not.exist();
            Feature.featureHolder.health_period = 200; // can't be changed from outside
            Feature.change({ health_metrics_level: 1 });
            Feature.change({ health_metrics_level: 1 });
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_1)).to.exist();
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_5)).to.exist();
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_15)).to.exist();

            setTimeout(() => {

                Metric.getAllReports();
                Metric.getAllReports(true);
                const metrics = SqreenSDK.Signal.prototype.BATCH
                    .data
                    .filter((metric) => metric.signal_name.indexOf(HEALTH.SYSTEM_LOAD_15) > -1 || metric.signal_name.indexOf(HEALTH.SYSTEM_LOAD_1) > -1 || metric.signal_name.indexOf(HEALTH.SYSTEM_LOAD_5) > -1);
                    // .filter((x) => [HEALTH.SYSTEM_LOAD_1, HEALTH.SYSTEM_LOAD_5, HEALTH.SYSTEM_LOAD_15].indexOf(x.signal_name) > -1);

                expect(metrics).to.have.length(3);
                metrics.forEach((m) => {

                    expect(m.payload.values[0].key).to.equal('load');
                    expect(m.payload.values[0].value).to.have.length(1);
                    expect(m.payload.values[0].value[0]).to.be.a.number();
                });
                Feature.change({ health_metrics_level: 2 }); // coverage god
                Feature.change({ health_metrics_level: 0 });
                Feature.change({ health_metrics_level: 0 });
                expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_1)).to.not.exist();
                expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_5)).to.not.exist();
                expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_15)).to.not.exist();

                expect(Health._hasLoop()).to.be.false();
                done();
            }, 250);

        });
    });
});
