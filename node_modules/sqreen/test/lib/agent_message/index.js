/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Message = require('../../../lib/agent_message/index');
const Event = require('../../../lib/events');
const Shimmer = require('shimmer');

describe('Messages', () => {

    it('should create a message ensure only one can be reported', { plan: 8 }, (done) => {

        Shimmer.wrap(Event, 'writeEvent', () => {

            return function (kind, evt) {

                expect(kind).to.equal('agent_message');
                expect(evt.kind).to.equal('first_require');
                expect(evt.message).to.equal('hello world');
                expect(evt.infos).to.equal({});
                expect(evt.id).to.exist();
            };
        });

        const message1 = new Message(Message.KIND.first_require, 'hello world');
        const message2 = new Message(Message.KIND.first_require);
        const message3 = new Message(Message.KIND.first_require, 'hello world', {});
        const message4 = new Message(Message.KIND.first_require);

        message1.report();

        expect(message2.canReport()).to.be.true();

        Message.initKnownMessages([message2.id]);

        expect(message3.canReport()).to.be.false();
        expect(message4.canReport()).to.be.false();

        message4.report()
            .then(() => {

                Event.writeEvent.__unwrap();
                Event.drain();
                done();
            });
    });
});
