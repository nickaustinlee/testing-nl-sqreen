/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const MessagePath = '../../../lib/agent_message/index.signal';

describe('Messages', () => {

    it('should create a message ensure only one can be reported', { plan: 5 }, (done) => {

        const Message = require(MessagePath);

        Message.prototype.BATCH.data = [];

        const message1 = new Message(Message.KIND.first_require, 'hello world');
        const message2 = new Message(Message.KIND.first_require);
        const message3 = new Message(Message.KIND.first_require, 'hello world', {});
        const message4 = new Message(Message.KIND.first_require);

        message1.report();

        expect(message2.canReport()).to.be.true();

        Message.initKnownMessages([message2.payload.hash]);

        expect(message3.canReport()).to.be.false();
        expect(message4.canReport()).to.be.false();

        message4.report()
            .then(() => {

                expect(message4.BATCH.data).to.have.length(1);
                const record = message4.BATCH.data.pop();
                expect(record).to.equal(message1);

            })
            .then(() => done());
    });
});
