/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const beforeEach = lab.beforeEach;
const expect = Code.expect;

const Hook = require('../../../lib/instrumentation/hooks/expressHook');
const Express = require('express');
const SuperTest = require('supertest');

const identity = require('../../../lib/instrumentation/moduleIdentity').scan('express/lib/router/layer.js', module);
const Patcher = require('../../../lib/instrumentation/patcher');
Patcher.patchModule(require('express/lib/router/layer.js'), identity);

Hook({}, Express);

let app;

const request = function (eApp, path) {

    return new Promise((resolve, reject) => {

        SuperTest(eApp)
            .get(path)
            .expect(200, (err) => {

                if (err) {
                    return reject(err);
                }
                return resolve();
            });
    });
};

describe('Hook Express', () => {

    beforeEach((done) => {

        // create a new app before each tests
        app = Express();
        done();
    });

    it('should collect the routing table of an express app', { plan: 2 }, (done) => {

        require('sq-ecosystem/lib/transport/http.incoming')({ module: require('http'), identity: {} }, require('../../../lib/ecosystem/index'));
        // require('../../../lib/instrumentation/hooks/tracingHook').enable(require('http'), {});
        require('../../../lib/instrumentation/record').switchInstru(true);
        app.get('/hello/:name/world', (req, res) => {

            return res.end('ok');
        });

        const Shimmer = require('shimmer');
        const DataPoint = require('../../../lib/data_point/index').DataPoint;
        Shimmer.wrap(DataPoint.prototype, 'report', () => {

            return function () {

                expect(this.signal_identifier).to.equal('cmd:report_routing_table:123');
                expect(this.infos).to.equal([{ methods: ['GET'], path: '/hello/:name/world' }]);

                DataPoint.prototype.report.__unwrap();
                done();
                return Promise.resolve();
            };
        });

        request(app, '/hello/Sqreen/world')
            .then(() => {

                require('../../../lib/command').execute({ name: 'report_routing_table', uuid: '123' })
                    .catch(done);
            })
            .then(() => request(app, '/hello/Sqreen/world'))
            .catch(done);
    });
});
