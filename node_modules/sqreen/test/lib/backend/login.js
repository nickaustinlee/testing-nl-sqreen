/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();
const Path = require('path');

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');

const Login = require('../../../lib/backend/login');

describe('Backend.login', () => {

    if (process.platform !== 'win32') {
        describe('getLimits', () => {

            it('should read a limit file', { plan: 2 }, (done) => {

                const Shimmer = require('shimmer');
                const Fs = require('fs');
                Shimmer.wrap(Fs, 'readFile', (orig) => {

                    return function () {

                        expect(arguments[0]).to.equal('/proc/55/limits');
                        arguments[0] = './package.json';
                        return orig.apply(this, arguments);
                    };
                });
                Login._getLimits(55, (s) => {

                    expect(s).to.equal(Fs.readFileSync('./package.json').toString());
                    Fs.readFile.__unwrap();
                    done();
                });
            });

            it('should fail read a limit file', { plan: 2 }, (done) => {

                const Shimmer = require('shimmer');
                const Fs = require('fs');
                Shimmer.wrap(Fs, 'readFile', (orig) => {

                    return function () {

                        expect(arguments[0]).to.equal('/proc/5574685425/limits');
                        return orig.apply(this, arguments);
                    };
                });
                Login._getLimits(5574685425, (s) => {

                    expect(s).to.equal('');
                    Fs.readFile.__unwrap();
                    done();
                });
            });
        });
    }
    else {
        describe('getLimits', () => {

            it('should not find the limit file', { plan: 1 }, (done) => {

                Login._getLimits(process.pid, (s) => {

                    expect(s).to.equal('');
                    done();
                });
            });

            it('should cover the read of a limit file', { plan: 1 }, (done) => {

                const Shimmer = require('shimmer');
                const Fs = require('fs');
                Shimmer.wrap(Fs, 'readFile', () => {

                    return function (path, cb) {

                        return cb(null, 'hello');
                    };
                });
                Login._getLimits(5574685425, (s) => {

                    expect(s).to.equal('hello');
                    Fs.readFile.__unwrap();
                    done();
                });
            });
        });
    }

    describe('getPayload', () => {

        it('should read the conf of sqreen package', { plan: 3 }, () => {

            return Login.getPayload()
                .then((payload) => {

                    expect(payload).to.exist();
                    expect(payload.various_infos.app_name).to.equal('sqreen');
                    expect(new Date() - new Date(payload.various_infos.time)).to.be.below(20);
                });
        });

        it('should read the conf of sqreen package even without dependencies', { plan: 4 }, () => {

            const MockedLogin = Proxyquire('../../../lib/backend/login', {
                '../package-reader': {
                    getDependencies: function () {

                        return Promise.reject('err');
                    }
                }
            });

            return MockedLogin.getPayload()
                .then((payload) => {

                    expect(payload).to.exist();
                    expect(payload.various_infos.app_name).to.equal('sqreen');
                    expect(new Date() - new Date(payload.various_infos.time)).to.be.below(20);
                    expect(payload.bundle_signature).to.have.length(40);
                });
        });

        it('should read the conf of sqreen package even without proper package', { plan: 4 }, () => {

            const MockedLogin = Proxyquire('../../../lib/backend/login', {
                '../package-reader': {
                    getDependencies: function () {

                        return Promise.reject('err');
                    },
                    readPackage: function () {

                        return {};
                    }
                }
            });

            return MockedLogin.getPayload()
                .then((payload) => {

                    expect(payload).to.exist();
                    expect(payload.various_infos.app_name).to.equal(null);
                    expect(new Date() - new Date(payload.various_infos.time)).to.be.below(20);
                    expect(payload.bundle_signature).to.have.length(40);
                });
        });
    });

    describe('_buildPayload', () => {

        it('should not read a non existing file', { plan: 2 }, (done) => {

            const MockedLogin = Proxyquire('../../../lib/backend/login', {
                '../config': {
                    getConfig: () => ({ app_name: 'aaa' })
                }
            });
            const baseRoot = process.cwd();
            process.chdir(Path.join(__dirname, '..', '..', '..'));
            const result = MockedLogin._buildPayload([]);
            expect(result).to.exist();
            expect(result.various_infos.app_name).to.equal('sqreen');
            process.chdir(baseRoot);
            done();
        });

        it('should not read a non existing file', (done) => {

            const MockedLogin = Proxyquire('../../../lib/backend/login', {
                '../config': {
                    getConfig: () => null
                }
            });
            const baseRoot = process.cwd();
            process.chdir('./test');
            const result = MockedLogin._buildPayload([]);
            expect(result).to.exist();
            try {
                expect(result.various_infos.app_name).to.equal('sqreen');
            }
            catch (_) {
                expect(result.various_infos.app_name).to.equal('lab');
            }
            process.chdir(baseRoot);
            done();
        });

        it('should build even in stupid environments', { plan: 4 }, (done) => {

            const geteuid = process.geteuid;
            const getegid = process.getegid;
            const getuid = process.getuid;
            const getgid = process.getgid;

            process.geteuid = null;
            process.getegid = null;
            process.getuid = null;
            process.getgid = null;

            const payload = Login._buildPayload([]);

            expect(payload.euid).to.not.exist();
            expect(payload.egid).to.not.exist();
            expect(payload.uid).to.not.exist();
            expect(payload.gid).to.not.exist();

            process.geteuid = geteuid;
            process.getegid = getegid;
            process.getuid = getuid;
            process.getgid = getgid;
            done();
        });
    });
});

