/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Http = require('http');
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const HttpProxy = require('http-proxy');

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const WAP = require('../../../lib/backend/wreckAsPromised');
const Version = require('../../../version.json');
const defaultHeaders = {
    accept: 'application/json',
    'content-type': 'application/json',
    'user-agent': 'sqreen-nodejs/' + Version.version
};

const Proxyquire = require('proxyquire');

describe('WAP', () => {

    describe('proxy', () => {

        it('should connect through a proxy for HTTP requests', { plan: 2 }, (done) => {

            const PorxiedWAP = Proxyquire('../../../lib/backend/wreckAsPromised', {
                '../config': {
                    getConfig() {

                        return {
                            http_proxy: 'http://127.0.0.1:9000'
                        };
                    }
                }
            });

            const server = Http.createServer((req, res) => {

                expect(req.headers['X-Special-Proxy-Header'.toLowerCase()]).to.equal('foobar');
                res.end('ok this works');
            });
            const proxy = HttpProxy.createProxyServer({ target: 'http://127.0.0.1:8080' });

            proxy.on('proxyReq', (proxyReq) => {

                proxyReq.setHeader('X-Special-Proxy-Header', 'foobar');
            });

            server.listen(8080, () => {

                proxy.listen(9000, () => {

                    PorxiedWAP.GET('http://127.0.0.1:8080/a', {})
                        .then((x) => {

                            expect(x.toString()).to.equal('ok this works');
                            server.close();
                            proxy.close();
                            done();
                        });
                });
            });
        });
    });

    describe('_writeError', () => {

        it('should write errors', { plan: 2 }, (done) => {

            expect(WAP._writeError(500).code).to.equal('Internal Server Error');
            expect(WAP._writeError(1492).code).to.equal(1492);
            done();
        });
    });

    describe('_assignHeaders', () => {

        it('should assign headers', { plan: 2 }, (done) => {

            expect(WAP._assignHeaders({})).to.equal(defaultHeaders);
            const aaHeaders = defaultHeaders;
            aaHeaders.X = 'aa';
            expect(WAP._assignHeaders({ headers: { X: 'aa' } })).to.equal(aaHeaders);
            done();
        });
    });

    describe('_handleResponse', () => {

        it('should handle new errors', { plan: 1 }, (done) => {

            const handle = WAP._handleResponse(() => null, (err) => {

                expect(err).to.exist();
                done();
            });
            handle({ isBoom: true });
        });

        it('should handle new errors', { plan: 1 }, (done) => {

            const handle = WAP._handleResponse(() => null, (err) => {

                expect(err).to.exist();
                done();
            });
            handle({ isBoom: true, output: { statusCode: 500, payload: {} } });
        });

        it('should _handleResponse', { plan: 1 }, (done) => {

            const handle = WAP._handleResponse(() => null, (err) => {

                expect(err).to.exist();
                done();
            });
            handle({});
        });

        it('should _handleResponse', { plan: 1 }, (done) => {

            const handle = WAP._handleResponse(() => null, (err) => {

                expect(err).to.exist();
                done();
            });
            handle(null, { statusCode: 500 });
        });

        it('should _handleResponse', { plan: 1 }, (done) => {

            const handle = WAP._handleResponse((payload) => {

                expect(payload).to.exist();
                done();
            }, () => null);
            handle(null, { statusCode: 200 }, {});
        });
    });

    describe('GET', () => {

        const Wreck = require('../../../vendor/wreck/lib/index');

        it('should get', { plan: 1 }, (done) => {

            const get = Wreck.__proto__.get;
            Wreck.__proto__.get = function (uri) {

                expect(uri).to.equal('uri');
                Wreck.__proto__.get = get;
                done();
            };
            WAP.GET('uri', {});
        });
    });

    describe('POST', () => {

        const Wreck = require('../../../vendor/wreck/lib/index');

        it('should post', { plan: 1 }, (done) => {

            const get = Wreck.__proto__.post;
            Wreck.__proto__.post = function (uri) {

                expect(uri).to.equal('uri');
                Wreck.__proto__.post = get;
                done();
            };
            WAP.POST('uri', {}, {});
        });

        it('should post', { plan: 1 }, (done) => {

            const get = Wreck.__proto__.post;
            Wreck.__proto__.post = function (uri) {

                expect(uri).to.equal('uri');
                Wreck.__proto__.post = get;
                done();
            };
            WAP.POST('uri', {}, '');
        });

        it('should not post', { plan: 1 }, (done) => {

            const obj = {};
            obj.x = obj;
            WAP.POST('uri', {}, obj)
                .catch((err) => {

                    expect(err).to.exist();
                    done();
                });
        });
    });

});
