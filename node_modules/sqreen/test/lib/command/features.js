/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');

describe('Command', () => {

    describe('features', () => {

        it('should change request budget overtime cb metric', { plan: 1 }, (done) => {

            const Features = require('../../../lib/command/features');
            Features.change({
                request_overtime_metric_period: 65
            });
            const metric = require('../../../lib/metric').getMetricByName('request_overbudget_cb');
            expect(metric.period).to.equal(65000);
            done();
        });

        it('should disable perfmon', { plan: 3 }, (done) => {

            const Features = require('../../../lib/command/features');
            Features.switchInstrumentationState(true);
            Features.change({
                performance_metrics_period: -1
            });
            expect(Features.perfmon()).to.be.false();
            Features.change({
                performance_metrics_period: 100,
                perf_level: 1
            });
            expect(Features.perfmon()).to.be.true();
            Features.change({
                performance_metrics_period: 100,
                perf_level: 0
            });
            expect(Features.perfmon()).to.be.false();
            done();
        });

        it('should enable perf level', { plan: 2 }, (done) => {

            const Features = require('../../../lib/command/features');
            const Metrics = require('../../../lib/metric');
            Features.change({
                perf_level: 1,
                perf_base: 2,
                perf_pct_base: 1.3
            });

            expect(Metrics._METRIC_STORE.has('req')).to.be.true();

            Features.change({
                perf_level: 0,
                perf_base: 2,
                perf_pct_base: 1.3
            });
            expect(Metrics._METRIC_STORE.has('req')).to.be.false();
            done();
        });

        it('should try to set illegal values for exception cap features', { plan: 8 }, (done) => {

            const Features = Proxyquire('../../../lib/command/features', {
                '../exception': {
                    report: function (err) {

                        expect(err).to.exist();
                        return Promise.reject(err);
                    }
                }
            });
            Features.change([{ exception_cap_alpha: -1 }]);
            expect(Features.read().exception_cap_alpha).to.equal(0.00106049);
            Features.change([{ exception_cap_alpha: 10 }]);
            expect(Features.read().exception_cap_alpha).to.equal(0.00106049);

            Features.change([{ exception_cap_threshold_percentage: -1 }]);
            expect(Features.read().exception_cap_threshold_percentage).to.equal(10);

            Features.change([{ exception_cap_threshold_percentage: 101 }]);
            expect(Features.read().exception_cap_threshold_percentage).to.equal(10);

            done();
        });

        it('should change the features', { plan: 5 }, (done) => {

            let run = 0;
            const Features = Proxyquire('../../../lib/command/features', {
                '../exception': {
                    report: function (err) {

                        expect(err).to.exist();
                        return Promise.reject(err);
                    }
                },
                '../agent': {
                    heartBeatLoopStarter: function (payload) {

                        expect(payload.firstInterval).to.equal(15000);
                    }
                },
                '../metric/default': {
                    enableCallCount: function (value) {

                        if (run === 0) {
                            ++run;
                            return;
                        }
                        expect(value).to.equal(55);
                    }
                }
            });
            Features.featureHolder.use_signals = true;

            const res = Features.change([
                {
                    poney: 10,
                    heartbeat_delay: 15,
                    batch_size: 1,
                    max_staleness: 1,
                    call_counts_metrics_period: 55,
                    whitelisted_metric: false,
                    monitoring_perf_budget: null
                }
            ]);
            expect(res).to.equal({
                was: {
                    synchronous_blocking: false,
                    exception_cap_alpha: 0.00106049,
                    exception_cap_threshold_percentage: 10,
                    use_signals: true,
                    call_counts_metrics_period: 60,
                    max_staleness: 500000,
                    batch_size: 100,
                    heartbeat_delay: 0,
                    whitelisted_metric: true,
                    rules_signature: true,
                    perf_level: 1,
                    perf_base: 2,
                    perf_unit: 0.1,
                    perf_pct_base: 1.3,
                    perf_pct_unit: 1,
                    max_radix_size: 10000,
                    performance_metrics_period: 60,
                    health_metrics_level: 0,
                    health_period: 60000,
                    request_overtime_metric_period: 60,
                    monitoring_perf_budget: 5, //ms
                    monitoring_request_overtime_metric_period: 60 // s
                },
                now: {
                    synchronous_blocking: false,
                    exception_cap_alpha: 0.00106049,
                    exception_cap_threshold_percentage: 10,
                    use_signals: true,
                    heartbeat_delay: 15,
                    batch_size: 1,
                    max_staleness: 1,
                    call_counts_metrics_period: 55,
                    whitelisted_metric: false,
                    rules_signature: true,
                    perf_level: 1,
                    perf_base: 2,
                    perf_unit: 0.1,
                    perf_pct_base: 1.3,
                    perf_pct_unit: 1,
                    max_radix_size: 10000,
                    performance_metrics_period: 60,
                    health_metrics_level: 0,
                    health_period: 60000,
                    request_overtime_metric_period: 60,
                    monitoring_perf_budget: null, //ms
                    monitoring_request_overtime_metric_period: 60 // s
                }
            });

            expect(Features.read()).to.equal({
                synchronous_blocking: false,
                exception_cap_alpha: 0.00106049,
                exception_cap_threshold_percentage: 10,
                use_signals: true,
                heartbeat_delay: 15,
                batch_size: 1,
                max_staleness: 1,
                call_counts_metrics_period: 55,
                whitelisted_metric: false,
                rules_signature: true,
                perf_level: 1,
                perf_base: 2,
                perf_unit: 0.1,
                perf_pct_base: 1.3,
                perf_pct_unit: 1,
                max_radix_size: 10000,
                performance_metrics_period: 60,
                health_metrics_level: 0,
                health_period: 60000,
                request_overtime_metric_period: 60,
                monitoring_perf_budget: null, //ms
                monitoring_request_overtime_metric_period: 60 // s
            });

            done();
        });

        it('should change the features and disable batch', { plan: 4 }, (done) => {

            const Features = Proxyquire('../../../lib/command/features', {
                '../exception': {
                    report: function (err) {

                        expect(err).to.exist();
                        return Promise.reject(err);
                    }
                },
                '../agent': {
                    heartBeatLoopStarter: function (payload) {

                        expect(payload.firstInterval).to.equal(15000);
                    }
                }
            });

            const res = Features.change([
                {
                    poney: 10,
                    heartbeat_delay: 15,
                    batch_size: 0,
                    max_staleness: 1,
                    monitoring_perf_budget: 0,
                    monitoring_request_overtime_metric_period: 60
                }
            ]);
            expect(res).to.equal({
                was: {
                    synchronous_blocking: false,
                    exception_cap_alpha: 0.00106049,
                    exception_cap_threshold_percentage: 10,
                    use_signals: false,
                    call_counts_metrics_period: 60,
                    max_staleness: 500000,
                    batch_size: 100,
                    heartbeat_delay: 0,
                    whitelisted_metric: true,
                    rules_signature: true,
                    perf_level: 1,
                    perf_base: 2,
                    perf_unit: 0.1,
                    perf_pct_base: 1.3,
                    perf_pct_unit: 1,
                    max_radix_size: 10000,
                    performance_metrics_period: 60,
                    health_metrics_level: 0,
                    health_period: 60000,
                    request_overtime_metric_period: 60,
                    monitoring_perf_budget: 5, //ms
                    monitoring_request_overtime_metric_period: 60 // s
                },
                now: {
                    synchronous_blocking: false,
                    exception_cap_alpha: 0.00106049,
                    exception_cap_threshold_percentage: 10,
                    use_signals: false,
                    call_counts_metrics_period: 60,
                    heartbeat_delay: 15,
                    batch_size: 0,
                    max_staleness: 1,
                    whitelisted_metric: true,
                    rules_signature: true,
                    perf_level: 1,
                    perf_base: 2,
                    perf_unit: 0.1,
                    perf_pct_base: 1.3,
                    perf_pct_unit: 1,
                    max_radix_size: 10000,
                    performance_metrics_period: 60,
                    health_metrics_level: 0,
                    health_period: 60000,
                    request_overtime_metric_period: 60,
                    monitoring_perf_budget: 0, //ms
                    monitoring_request_overtime_metric_period: 60 // s
                }
            });

            expect(Features.read()).to.equal({
                synchronous_blocking: false,
                exception_cap_alpha: 0.00106049,
                exception_cap_threshold_percentage: 10,
                use_signals: false,
                call_counts_metrics_period: 60,
                heartbeat_delay: 15,
                batch_size: 0,
                max_staleness: 1,
                whitelisted_metric: true,
                rules_signature: true,
                perf_level: 1,
                perf_base: 2,
                perf_unit: 0.1,
                perf_pct_base: 1.3,
                perf_pct_unit: 1,
                max_radix_size: 10000,
                performance_metrics_period: 60,
                health_metrics_level: 0,
                health_period: 60000,
                request_overtime_metric_period: 60,
                monitoring_perf_budget: 0, //ms
                monitoring_request_overtime_metric_period: 60 // s
            });

            done();
        });

        it('should change the features and disable batch', { plan: 4 }, (done) => {

            const Features = Proxyquire('../../../lib/command/features', {
                '../exception': {
                    report: function (err) {

                        expect(err).to.exist();
                        return Promise.reject(err);
                    }
                },
                '../agent': {
                    heartBeatLoopStarter: function (payload) {

                        expect(payload.firstInterval).to.equal(15000);
                    }
                }
            });

            const res = Features.change(
                {
                    poney: 10,
                    heartbeat_delay: 15,
                    batch_size: 0,
                    max_staleness: 1,
                    monitoring_perf_budget: 5
                }
            );
            expect(res).to.equal({
                was: {
                    exception_cap_alpha: 0.00106049,
                    exception_cap_threshold_percentage: 10,
                    use_signals: false,
                    call_counts_metrics_period: 60,
                    max_staleness: 500000,
                    batch_size: 100,
                    heartbeat_delay: 0,
                    whitelisted_metric: true,
                    rules_signature: true,
                    perf_level: 1,
                    perf_base: 2,
                    perf_unit: 0.1,
                    perf_pct_base: 1.3,
                    perf_pct_unit: 1,
                    max_radix_size: 10000,
                    performance_metrics_period: 60,
                    health_metrics_level: 0,
                    health_period: 60000,
                    request_overtime_metric_period: 60,
                    synchronous_blocking: false,
                    monitoring_perf_budget: 5, //ms
                    monitoring_request_overtime_metric_period: 60 // s
                },
                now: {
                    exception_cap_alpha: 0.00106049,
                    exception_cap_threshold_percentage: 10,
                    use_signals: false,
                    heartbeat_delay: 15,
                    call_counts_metrics_period: 60,
                    synchronous_blocking: false,
                    batch_size: 0,
                    max_staleness: 1,
                    whitelisted_metric: true,
                    rules_signature: true,
                    perf_level: 1,
                    perf_base: 2,
                    perf_unit: 0.1,
                    perf_pct_base: 1.3,
                    perf_pct_unit: 1,
                    max_radix_size: 10000,
                    performance_metrics_period: 60,
                    health_metrics_level: 0,
                    health_period: 60000,
                    request_overtime_metric_period: 60,
                    monitoring_perf_budget: 5, //ms
                    monitoring_request_overtime_metric_period: 60 // s
                }
            });

            expect(Features.read()).to.equal({
                exception_cap_alpha: 0.00106049,
                exception_cap_threshold_percentage: 10,
                use_signals: false,
                heartbeat_delay: 15,
                call_counts_metrics_period: 60,
                batch_size: 0,
                max_staleness: 1,
                whitelisted_metric: true,
                rules_signature: true,
                perf_level: 1,
                perf_base: 2,
                perf_unit: 0.1,
                perf_pct_base: 1.3,
                perf_pct_unit: 1,
                max_radix_size: 10000,
                synchronous_blocking: false,
                performance_metrics_period: 60,
                health_metrics_level: 0,
                health_period: 60000,
                request_overtime_metric_period: 60,
                monitoring_perf_budget: 5, //ms
                monitoring_request_overtime_metric_period: 60 // s
            });

            done();
        });
    });
});
