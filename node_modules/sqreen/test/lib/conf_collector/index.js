/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const URL = require('url');

const Config = require('../../../lib/conf_collector/index.js');

describe('Configuration collector', () => {

    describe('readPassword', () => {

        it('should return no password stuff', { plan: 1 }, (done) => {

            expect(Config.readPassword({})).to.equal({
                score: -1, // no password
                crack_times_seconds: {
                    online_throttling_100_per_hour: 0,
                    online_no_throttling_10_per_second: 0,
                    offline_slow_hashing_1e4_per_second: 0,
                    offline_fast_hashing_1e10_per_second: 0
                },
                crack_times_display: {
                    online_throttling_100_per_hour: 'no password',
                    online_no_throttling_10_per_second: 'no password',
                    offline_slow_hashing_1e4_per_second: 'no password',
                    offline_fast_hashing_1e10_per_second: 'no password'
                }
            });
            done();
        });
    });

    describe('readURL', () => {

        it('should read url canonical case', { plan: 1 }, (done) => {

            const str = 'mongodb://user:password@server/db';
            const res = Config.readURL(str);

            const exp = URL.parse(str);
            exp.auth = {
                username: 'user',
                password: {
                    score: 0,
                    crack_times_seconds: {
                        online_throttling_100_per_hour: 108,
                        online_no_throttling_10_per_second: 0.3,
                        offline_slow_hashing_1e4_per_second: 0.0003,
                        offline_fast_hashing_1e10_per_second: 3e-10 },
                    crack_times_display: {
                        online_throttling_100_per_hour: '2 minutes',
                        online_no_throttling_10_per_second: 'less than a second',
                        offline_slow_hashing_1e4_per_second: 'less than a second',
                        offline_fast_hashing_1e10_per_second: 'less than a second' }
                }
            };
            expect(res).to.equal(exp);
            done();
        });

        it('should read url with : in password', { plan: 1 }, (done) => {

            const str = `mongodb://user:${encodeURIComponent('password::')}@server/db`;
            const res = Config.readURL(str);

            const exp = URL.parse(str);
            exp.auth = {
                username: 'user',
                password: {
                    score: 1,
                    crack_times_seconds: {
                        online_throttling_100_per_hour: 7567200,
                        online_no_throttling_10_per_second: 21020,
                        offline_slow_hashing_1e4_per_second: 21.02,
                        offline_fast_hashing_1e10_per_second: 0.00002102
                    },
                    crack_times_display: {
                        online_throttling_100_per_hour: '3 months',
                        online_no_throttling_10_per_second: '6 hours',
                        offline_slow_hashing_1e4_per_second: '21 seconds',
                        offline_fast_hashing_1e10_per_second: 'less than a second'
                    }
                }
            };
            expect(res).to.equal(exp);
            done();
        });

        it('should read url without auth', { plan: 1 }, (done) => {

            const str = 'mongodb://server/db';
            const res = Config.readURL(str);

            const exp = URL.parse(str);
            expect(res).to.equal(exp);
            done();
        });

        it('should read url without auth', { plan: 1 }, (done) => {

            const str = 'mongodb://server/db';
            const res = Config._getAuth(':::', str);
            expect(res).to.equal(null);
            done();
        });

        it('should read url that throws', { plan: 1 }, (done) => {

            const res = Config.readURL({});

            expect(res).to.equal(null);
            done();
        });
    });
});
