/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');
const Util = require('../../testUtils');

const dataPointPath = '../../../lib/data_point';
const DP = require('../../../lib/data_point').DataPoint;


const DP_TYPE = require('../../../lib/enums/events').TYPE.DATA_POINT;
const Transform = require('../../../lib/signals/translate').TRANSFORMS[DP_TYPE];


describe('DataPoint', () => {

    it('should write and translate a data point', { plan: 2 }, (done) => {

        const point = new DP('a', 'b', 'c', {}, new Date());
        const pt = Transform(point);

        expect(pt.type).to.equal('point');
        expect(pt.signal_name).to.equal('a:b:c');
        done();
    });

    it('should write and report a datapoint', { plan: 4 }, (done) => {

        const evtStub = {
            writeEvent: function (type, evt) {

                expect(type).to.equal('data_point');
                expect(evt).to.exist();
                expect(evt.infos).to.equal({ ok: true });
                expect(evt.signal_identifier).to.equal('rule:1:rule');
                done();
                return Promise.resolve();
            }
        };
        Util.validateStub(require('../../../lib/events'), evtStub);
        const DataPoint = Proxyquire(dataPointPath, {
            '../events': evtStub
        });
        DataPoint.write({ rulesPack: '1', name: 'rule' }, { ok: true });
    });

    it('should write and report a datapoint without kind', { plan: 5 }, (done) => {

        require('../../../lib/command/features').featureHolder.use_signals = false;
        const evtStub = {
            writeEvent: function (type, evt) {

                expect(type).to.equal('data_point');
                expect(evt).to.exist();
                expect(evt.infos).to.equal({ ok: true });
                expect(evt.kind).to.not.exist();
                expect(evt.signal_identifier).to.equal('rule:1:rule');
                require('../../../lib/command/features').featureHolder.use_signals = true;
                done();
                return Promise.resolve();
            }
        };
        Util.validateStub(require('../../../lib/events'), evtStub);
        const DataPoint = Proxyquire(dataPointPath, {
            '../events': evtStub
        });
        DataPoint.write({ rulesPack: '1', name: 'rule' }, { ok: true });
    });

    it('should report a group of data points', { plan: 8 }, (done) => {

        let i = 0;
        const evtStub = {
            writeEvent: function (type, evt) {

                expect(type).to.equal('data_point');
                expect(evt).to.exist();
                expect(evt.infos).to.equal({});
                if (i === 0) {
                    expect(evt.signal_identifier).to.equal('rule:a1:bb');
                }
                if (i === 1) {
                    expect(evt.signal_identifier).to.equal('rule:a2:bb');
                    done();
                }
                ++i;
                return Promise.resolve();
            }
        };
        Util.validateStub(require('../../../lib/events'), evtStub);
        const DataPoint = Proxyquire(dataPointPath, {
            '../events': evtStub
        }).DataPoint;

        const dpList = [
            new DataPoint(DataPoint.KIND.RULE, 'a1', 'bb', {}, new Date()),
            new DataPoint(DataPoint.KIND.RULE, 'a2', 'bb', {})
        ];
        DataPoint.reportList(dpList);
    });
});

