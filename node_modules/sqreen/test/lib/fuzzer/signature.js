/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const FuzzerSign = require('../../../lib/fuzzer/signature');

const MockRuntime = 'exports.Fuzzer = class Fuzzer { }';

describe('Fuzzer.signature', () => {

    describe('verifyRuntimeSignature', () => {

        it('should fail on missing signature', { plan: 1 }, (done) => {

            const MockRuntimeInterface = {
                code: MockRuntime,
                signatures: [],
                version: 1,
                status: true
            };

            try {
                FuzzerSign.verifyRuntimeSignature(MockRuntimeInterface);
            }
            catch (err) {
                expect(err).to.exists();
            }
            done();
        });

        it('should fail on empty signature', { plan: 1 }, (done) => {

            const MockRuntimeInterface = {
                code: MockRuntime,
                signatures: [{
                    type: 2,
                    value: ''
                }],
                version: 1,
                status: true
            };

            try {
                FuzzerSign.verifyRuntimeSignature(MockRuntimeInterface);
            }
            catch (err) {
                expect(err).to.exists();
            }
            done();
        });

        it('should verify signature', { plan: 1 }, (done) => {

            const MockRuntimeInterface = {
                code: MockRuntime,
                signatures: [{
                    type: 2,
                    value: '304502203b023034bb985ef5bc9b361e0bb95f7738e3b3b4c2fa09b132a021b01442715c022100a36c54f2ad5f3f2fa6f9f582eb81dbe98193a33b45315c907511d7db7b187126'
                }],
                version: 1,
                status: true
            };

            const res = FuzzerSign.verifyRuntimeSignature(MockRuntimeInterface);
            expect(res).to.be.true();
            done();
        });

    });
});
