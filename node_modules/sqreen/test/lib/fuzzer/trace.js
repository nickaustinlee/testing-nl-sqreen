/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const FuzzerTrace = require('../../../lib/fuzzer/trace');

describe('Fuzzer.trace', () => {

    describe('getStackTrace', () => {

        it('should collect stack trace', { plan: 2 }, (done) => {

            const trace = FuzzerTrace.getStackTrace();
            expect(trace).to.be.an.array();
            expect(trace).not.to.be.empty();
            done();
        });

        it('should return no symbols on invalid frames', { plan: 1 }, (done) => {

            const syms = FuzzerTrace.getStackSymbols(undefined);
            expect(syms).to.be.empty();
            done();
        });

        it('should gather symbols', { plan: 8 }, (done) => {

            const trace = FuzzerTrace.getStackTrace();
            expect(trace).to.be.an.array();
            const syms = FuzzerTrace.getStackSymbols(trace);
            expect(syms).to.be.an.array();
            expect(syms).not.to.be.empty();
            const sym = syms[0];
            expect(sym).not.to.be.undefined();
            expect(sym.line).to.be.a.number();
            expect(sym.name).to.be.a.string();
            expect(sym.scriptfile).to.be.a.string();
            expect(sym.scriptpath).to.be.a.string();
            done();
        });

        it('should filter symbols', { plan: 9 }, (done) => {

            const trace = FuzzerTrace.getStackTrace();
            expect(trace).to.be.an.array();
            const syms = FuzzerTrace.getStackSymbols(trace, (i) => !i.includes('lab'));
            expect(syms).to.be.an.array();
            expect(syms).not.to.be.empty();
            const sym = syms[0];
            expect(sym).not.to.be.undefined();
            expect(sym.line).to.be.a.number();
            expect(sym.name).to.be.a.string();
            expect(sym.scriptfile).to.be.a.string();
            expect(sym.scriptpath).to.be.a.string();
            expect(sym.scriptpath).to.include('lab');
            done();
        });

    });
});
