/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;
const fail = Code.fail;

const FuzzerUtils = require('../../../lib/fuzzer/utils');

describe('Fuzzer.utils', () => {

    describe('asyncForEach', () => {

        it('should do nothing on invalid input', { plan: 0 }, (done) => {

            FuzzerUtils.asyncForEach(undefined, () => {

                fail('callback should never be called on invalid input');
            });

            done();
        });

        it('should do nothing on empty array', { plan: 0 }, (done) => {

            FuzzerUtils.asyncForEach([], () => {

                fail('callback should never be called on empty input');
            });

            done();
        });

        it('should return a single value if chunklen == 1', { plan: 2 }, (done) => {

            FuzzerUtils.asyncForEach([12, 4, 7], (val, i, next) => {

                if (!next()) {
                    expect(val).to.equal(7);
                    expect(i).to.equal(2);
                    done();
                }
            });
        });

        it('should return chunks of length == chunklen', { plan: 4 }, (done) => {

            FuzzerUtils.asyncForEach([12, 4, 7, 42], (val, i, next) => {

                if (!next()) {
                    expect(val).to.be.an.array();
                    expect(val).not.to.be.empty();
                    expect(val[0]).to.equal(7);
                    expect(i).to.equal(2);
                    done();
                }
            }, { chunklen: 2 } );
        });

    });
});
