/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Budget = require('../../../lib/instrumentation/budget.js');

describe('Performance budget', () => {

    it('should not track metrics', { plan: 2 }, (done) => {

        expect(Budget._safeMetricMethod()).to.not.exist();
        expect(Budget._safeMetricMethod('foo')).to.not.exist();

        done();
    });

    it('should provide the default infinity budget', { plan: 2 }, (done) => {

        Budget.INFINITY.stateCtr = 0;
        Budget.INFINITY.state = '';
        Budget.INFINITY.current = [0, 0];
        const budget = Budget.getBudget();
        expect(budget).to.equal(Budget.INFINITY);
        budget.start();
        budget.stop();
        expect(budget.remain).to.equal(Infinity);
        done();
    });

    it('should change the default budget value', { plan: 2 }, (done) => {

        Budget.setBudget(1000);
        const budget = Budget.getBudget();

        expect(budget).to.not.equal(Budget.INFINITY);
        expect(budget.remain).to.equal(1000);
        Budget.setBudget(Infinity);
        done();
    });

    it('should change the default Monitoring budget value', { plan: 2 }, (done) => {

        Budget.setMonitBudget(1000);
        const budget = Budget.getMonitoringBudget();

        expect(budget).to.not.equal(Budget.INFINITY);
        expect(budget.remain).to.equal(1000);
        Budget.setMonitBudget(Infinity);
        done();
    });

    it('should provide a budget and use it and check for it in cache', { plan: 3 }, (done) => {

        const req = {};
        Budget.setBudget(1000);
        const budget = Budget.getBudget(true, req);
        const budget2 = Budget.getBudget(true, req);
        expect(budget2 === budget).to.be.true();
        budget.startCount();
        budget.start(false);
        budget.perfMon = true;
        setTimeout(() => {

            budget.stopCount();
            budget.stopCount();
            expect(budget.remain).to.be.below(951);
            expect(budget.remain).to.be.above(935); // libUV might be terrible on windows/appveyor
            done();
        }, 50);
    });

    it('should provide a budget and not use it', { plan: 1 }, (done) => {

        const budget = new Budget(1000);
        budget.start();
        setTimeout(() => {

            budget.stop();
            expect(budget.remain).to.equal(1000);
            done();
        }, 50);
    });

    it('should collect a rune time', { plan: 3 }, (done) => {

        const budget = Budget.getBudget(true);
        const Metrics = require('../../../lib/metric/index');
        budget.startCount();
        budget.start();
        setTimeout(() => {

            budget.stop('rule', 'pre');
            budget.start();
            budget.stop('rule', 'pre');
            budget.stopCount();

            expect(budget.sum).to.be.above(47);
            expect(budget.sum).to.be.below(67); // flacky windows

            expect(Metrics._METRIC_STORE.has('sq.rule.pre')).to.be.true();

            done();
        }, 50);
    });
});
