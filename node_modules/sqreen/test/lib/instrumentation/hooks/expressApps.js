/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const beforeEach = lab.beforeEach;
const expect = Code.expect;

const Hook = require('../../../../lib/instrumentation/hooks/expressHook');
const Express = require('express');
const SuperTest = require('supertest');
const ExpressEndpoints = require('express-list-endpoints');

const identity = require('../../../../lib/instrumentation/moduleIdentity').scan('express/lib/router/layer.js', module);
const Patcher = require('../../../../lib/instrumentation/patcher');
Patcher.patchModule(require('express/lib/router/layer.js'), identity);

Hook({}, Express);

let app;

describe('Hook Express', () => {

    beforeEach((done) => {

        // create a new app before each tests
        app = Express();
        done();
    });

    it('should cover the multiple potentially matching middlewares case', { plan: 2 }, (done) => {

        const middleware = (req, res, next) => {

            req.xxx = 1;
            next();
        };

        const route = Express.Router();
        route.get('/:tenant*', (req, res) => {

            expect(req.xxx).to.equal(1);
            expect(req.__route).to.equal('/v1/org/:tenant*');
            res.send('boom');
        });

        app.use('/v1*', middleware);
        app.use('/v1/org', route);

        SuperTest(app)
            .get('/v1/org/aa')
            .expect(200, done);
    });

    it('should cover the multiple potentially matching middlewares case 2', { plan: 1 }, (done) => {

        const router1 = Express.Router();
        const router2 = Express.Router();
        const router3 = Express.Router();

        router1.get('/x', (req, res) => {

            res.end('ok');
        });

        router2.get('/', (req, res) => {

            expect(req.__route).to.equal('/xxx/a/ok/');
            res.end('ok2');
        });

        router3.use('/a/*', router1);
        router3.use('/a/ok', router2);
        app.use('/xxx', router3);
        SuperTest(app)
            .get('/xxx/a/ok')
            .expect(200, done);
    });

    it('should cover the multiple potentially matching middlewares case 3', { plan: 2 }, (done) => {

        const middleware = (req, res, next) => {

            req.xxx = req.xxx || 0;
            req.xxx++;
            next();
        };

        const root = Express.Router();

        const tenants = Express.Router();
        tenants.get('/:tenant/test', (req, res) => {

            expect(req.xxx).to.equal(2);
            expect(req.__route).to.equal('/v1/org/:tenant/test');

            res.send('boom');
        });

        const router = Express.Router();

        router.all('/v1/*', middleware);
        router.get('/v1/auth', (req, res) => res.sent({}));
        router.all('/v1/org/:tenant*', middleware);

        router.use('/', root);

        router.use('/v1/org', tenants);

        app.use(router);

        SuperTest(app)
            .get('/v1/org/666/test')
            .expect(200, done);
    });

    it('should indeed find the routes used', { plan: 2 }, (done) => {

        app.get('/hello/:name/world', (req, res) => {

            expect(req.__route).to.equal('/hello/:name/world');
            res.end('ok');
        });

        const table = ExpressEndpoints(app);
        expect(table).to.equal([{ path: '/hello/:name/world', methods: ['GET'] }]);
        SuperTest(app)
            .get('/hello/:name/world')
            .expect(200, done);
    });

    it('should indeed find the routes used (with a regex)', { plan: 2 }, (done) => {

        app.get(/a+/, (req, res) => {

            expect(req.__route).to.equal('/a+/');
            res.end('ok');
        });

        const table = ExpressEndpoints(app);
        expect(table).to.equal([{ path: '/a+/', methods: ['GET'] }]);
        SuperTest(app)
            .get('/aaaaa')
            .expect(200, done);
    });

    it('should indeed find the routes used (with a regex)', { plan: 2 }, (done) => {

        app.get('/a+', (req, res) => {

            expect(req.__route).to.equal('/a+');
            res.end('ok');
        });

        const table = ExpressEndpoints(app);
        expect(table).to.equal([{ path: '/a+', methods: ['GET'] }]);
        SuperTest(app)
            .get('/aaaaa')
            .expect(200, done);
    });

    it('should indeed find the routes used with a router', { plan: 2 }, (done) => {

        const router = Express.Router();
        router.get('/hello/:name/world', (req, res) => {

            expect(req.__route).to.equal('/aa/hello/:name/world');
            res.end('ok');
        });

        app.use('/aa', router);

        const table = ExpressEndpoints(app);
        expect(table).to.equal([{ path: '/aa/hello/:name/world', methods: ['GET'] }]);
        SuperTest(app)
            .get('/aa/hello/:name/world')
            .expect(200, done);
    });

    it('should indeed find the routes used with the default error handler', { plan: 2 }, (done) => {

        const router = Express.Router();
        router.get('/hello/:name/world', (req, res, next) => {

            expect(req.__route).to.equal('/aa/hello/:name/world');
            next(new Error());
        });

        app.use('/aa', router);

        const table = ExpressEndpoints(app);
        expect(table).to.equal([{ path: '/aa/hello/:name/world', methods: ['GET'] }]);
        SuperTest(app)
            .get('/aa/hello/:name/world')
            .expect(500, done);
    });

    it('should indeed find the routes used with a custom error handler', { plan: 4 }, (done) => {

        const router = Express.Router();
        router.get('/hello/:name/world', (req, res, next) => {

            expect(req.__route).to.equal('/aa/hello/:name/world');
            next(new Error('lol'));
        });

        app.use('/aa', router);

        app.use((err, req, res, next) => {

            expect(err.message).to.equal('lol');
            expect(req.__route).to.equal('/aa/hello/:name/world');
            res.sendStatus(501);
        });

        const table = ExpressEndpoints(app);
        expect(table).to.equal([{ path: '/aa/hello/:name/world', methods: ['GET'] }]);
        SuperTest(app)
            .get('/aa/hello/:name/world')
            .expect(501, done);
    });

    it('should cover edgy case', { plan: 1 }, (done) => {

        const router = Express.Router();
        router.get('/rter', (req, res) => {

            throw new Error('err');
        });

        app.use((req, res, next) => {

            next();
        });

        app.use('/hello/:xxx', router);

        app.use((req, res, next) => {

            next();
        });

        app.use((_, req, res, next) => {

            expect(req.__route).to.equal('/hello/:xxx/rter');
            res.end('ok');
        });
        SuperTest(app)
            .get('/hello/world/rter')
            .expect(200, done);
    });

    it('should indeed find the routes used with two custom error handlers', { plan: 5 }, (done) => {

        const router = Express.Router();
        router.get('/hello/:name/world', (req, res, next) => {

            expect(req.__route).to.equal('/aa/hello/:name/world');
            next(new Error('lol'));
        });

        app.use('/aa', router);

        app.use((err, req, res, next) => {

            expect(err.message).to.equal('lol');
            next(err);
        });

        app.use((err, req, res, next) => {

            expect(err.message).to.equal('lol');
            expect(req.__route).to.equal('/aa/hello/:name/world');
            res.sendStatus(502);
        });

        const table = ExpressEndpoints(app);
        expect(table).to.equal([{ path: '/aa/hello/:name/world', methods: ['GET'] }]);
        SuperTest(app)
            .get('/aa/hello/:name/world')
            .expect(502, done);
    });

    it('should find the endpoints even when empty middleware fns are around', { plan: 1 }, (done) => {

        const tenant = Express.Router();
        const nopass = Express.Router();

        const pass = function (req, res, next) {

            next();
        };
        nopass.get('/v1', pass);
        tenant.all('/v1/org*', pass);
        tenant.all('/v1/org/:tenant', pass);
        tenant.use(nopass);
        tenant.use(pass);
        tenant.get('/v1/org/:tenant/admin', (req, res) => {

            expect(req.__route).to.equal('/v1/org/:tenant/admin');
            res.end('ok');
        });

        app.all('/v1/*', pass);
        app.all('/v1/org/:tenant*', pass);
        app.all('/v1/admin*', pass);
        app.use(tenant);

        SuperTest(app)
            .get('/v1/org/423/admin')
            .expect(200, done);
    });
});
