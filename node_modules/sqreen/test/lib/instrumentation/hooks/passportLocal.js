/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

describe('Hook', () => {

    describe('passportLocal', () => {

        it('should make the strategy instrumented', { plan: 1 }, (done) => {

            let ct2 = 0;
            const Strategy = require('passport-local');
            const Hook = require('../../../../lib/instrumentation/hooks/passportLocalHook');
            const Identity = require('../../../../lib/instrumentation/moduleIdentity');

            const id = Identity.scan('passport-local', module);
            Hook(id, Strategy);

            const strat = new Strategy((username, password, d) => {

                return d(null, true);
            });

            // Called when handler cb is called
            strat.success = function () {

                ct2++;
                if (ct2 === 2) {
                    return done();
                }
            };

            strat.authenticate({ body: { username: 'aa', password: 'bb' } });
            expect(strat._verify.__wrapped).to.be.true();
            strat.authenticate({ body: { username: 'aa', password: 'bb' } });
        });

        it('should make the strategy instrumented', { plan: 1 }, (done) => {

            let ct2 = 0;
            const Strategy = require('passport-local');
            const Hook = require('../../../../lib/instrumentation/hooks/passportLocalHook');
            const Identity = require('../../../../lib/instrumentation/moduleIdentity');

            const id = Identity.scan('passport-local', module);
            Hook(id, Strategy);

            const strat = new Strategy((username, password, d) => {

                return d(null, true);
            });

            const proto = Object.getPrototypeOf(strat);
            proto._verify = strat._verify; // in apostrophe tests, this method lies on the prototype
            delete strat._verify;

            // Called when handler cb is called
            strat.success = function () {

                ct2++;
                if (ct2 === 2) {
                    return done();
                }
            };

            strat.authenticate({ body: { username: 'aa', password: 'bb' } });
            expect(strat._verify.__wrapped).to.be.true();
            strat.authenticate({ body: { username: 'aa', password: 'bb' } });
        });
    });
});
