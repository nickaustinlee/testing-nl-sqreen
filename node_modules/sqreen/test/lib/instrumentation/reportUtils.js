/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const ReportUtils = require('../../../lib/instrumentation/reportUtil');

describe('ReportUtils', () => {

    describe('safeFromArray', () => {

        it('should sanitize the object', { plan: 1 }, (done) => {

            const item = {
                a: 'hello',
                b: {
                    c: {
                        d: {
                            e: 'world',
                            f: 'ok',
                            g: null,
                            h: /a/,
                            i: 10
                        }
                    }
                }
            };
            ReportUtils.safeFromArray(item, ['hello', 'world'], 0);
            expect(item).to.equal({
                a: '<Redacted by Sqreen>',
                b: {
                    c: {
                        d: {
                            e: '<Redacted by Sqreen>',
                            f: 'ok',
                            g: null,
                            h: /a/,
                            i: 10
                        }
                    }
                }
            });
            done();
        });

        it('should sanitize the object with partion PII', { plan: 1 }, (done) => {

            const item = {
                a: 'hello you',
                b: {
                    c: {
                        d: {
                            e: 'hey world',
                            f: 'ok',
                            g: null,
                            h: /a/,
                            i: 10
                        }
                    }
                }
            };
            ReportUtils.safeFromArray(item, ['hello', 'world'], 0);
            expect(item).to.equal({
                a: '<Redacted by Sqreen>',
                b: {
                    c: {
                        d: {
                            e: '<Redacted by Sqreen>',
                            f: 'ok',
                            g: null,
                            h: /a/,
                            i: 10
                        }
                    }
                }
            });
            done();
        });

        it('should sanitize a deep object', { plan: 1 }, (done) => {

            const item = {
                a: 'hello',
                b: {
                    c: {
                        d: {
                            e: 'world',
                            f: 'ok'
                        }
                    }
                }
            };
            let curr = item.b.c.d;
            for (let i = 0; i < 100; ++i) {
                curr.x = {};
                curr = curr.x;
            }
            curr.v = 'hello';

            ReportUtils.safeFromArray(item, ['hello', 'world'], 0);
            const expected = '{"a":"<Redacted by Sqreen>","b":{"c":{"d":{"e":"<Redacted by Sqreen>","f":"ok","x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"x":{"v":"hello"}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}';
            expect(JSON.stringify(item)).to.equal(expected);
            done();
        });
    });

    describe('mapRequest', () => {

        it('should cover all remaining cases', { plan: 1 }, (done) => {

            expect(JSON.parse(JSON.stringify(ReportUtils.mapRequest({
                __sqreen_uuid: 1,
                url: '/',
                query: {
                    hello: 'world'
                },
                headers: {
                    'user-agent': 'aa',
                    host: 'pony:777',
                    referer: 'pony',
                    'content-type': 'application/json'
                },
                method: 'GET',
                connection: {
                    remotePort: 888,
                    remoteAddress: '10.10.10'
                }
            }, true))))
                .to
                .equal({
                    rid: 1,
                    parameters: {
                        query: {
                            hello: 'world'
                        }
                    },
                    headers: {
                        'user-agent': 'aa',
                        'content-type': 'application/json',
                        host: 'pony:777'
                    },
                    user_agent: 'aa',
                    scheme: 'http',
                    verb: 'GET',
                    host: 'pony:777',
                    port: '777',
                    remote_port: 888,
                    path: '/',
                    remote_ip: '10.10.10',
                    referer: 'pony'
                });
            done();
        });
    });

    describe('mapRequestParams', () => {

        it('should test when hapi', { plan: 1 }, (done) => {

            const res = ReportUtils.mapRequestParams({
                __sqreen: {
                    hapi: [{
                        value: {
                            payload: 'payload'
                        }
                    }]
                }
            });
            expect(res.body).to.equal('payload');
            done();
        });
    });

    describe('mapRequest', () => {

        it('should test the referer thingy', { plan: 2 }, (done) => {

            const res = ReportUtils.mapRequest({ __sqreen_uuid: 1, headers: { host: 'a', referer: 'pony' } });
            expect(res.rid).to.equal(1);
            expect(res.referer).to.equal('pony');
            done();
        });
    });
});
