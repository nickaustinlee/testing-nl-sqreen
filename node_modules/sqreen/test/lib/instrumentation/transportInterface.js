/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const TransportInterface = require('../../../lib/instrumentation/transportInterface');
const TracingInterface = require('../../../lib/instrumentation/tracingInterface');
const Shimmer = require('shimmer');
const Ecosystem = require('sq-ecosystem');

describe('TransportInterface', () => {

    it('should cover the propagation chain', { plan: 2 }, (done) => {

        Ecosystem.trace = Ecosystem.trace || function () {};
        Shimmer.wrap(Ecosystem, 'trace', () => {

            return function () {

                return null;
            };
        });

        TransportInterface._FIELDS.push('foo');
        TracingInterface.updateScopeSampling('test.scope', {
            sampling: [{ calls: 1 }]
        });
        const todo = TransportInterface.shouldPropagate('test.scope');
        expect(todo.fields).to.include(['foo']);
        expect(todo.trigger).to.equal({ calls: 1 });

        const cleanup = TransportInterface.propagate('test.scope', { foo: 'bar' }, todo.trigger);
        cleanup();
        delete TransportInterface._FIELDS['test.scope'];
        Shimmer.unwrap(Ecosystem, 'trace');
        TransportInterface._FIELDS.pop();
        done();
    });

    it('should cover the propagation chain', { plan: 4 }, (done) => {

        const session = require('../../../lib/instrumentation/hooks/ns').getNS();
        session.run(() => {

            session.set('topSpan', require('../../../lib/engine').createSpanFromRoot());
            Ecosystem.trace = Ecosystem.trace || function () {};
            Shimmer.wrap(Ecosystem, 'trace', () => {

                return function () {

                    return {
                        payload_schema: '',
                        payload: {}
                    };
                };
            });

            TransportInterface._FIELDS.push('foo');
            TracingInterface.updateScopeSampling('test.scope', {
                sampling: [{ calls: 1 }]
            });
            const todo = TransportInterface.shouldPropagate('test.scope');
            expect(todo.fields).to.include(['foo']);
            expect(todo.trigger).to.equal({ calls: 1 });

            const cleanup = TransportInterface.propagate({ foo: 'bar' }, todo.trigger, true);
            expect(session.get('topSpan').resolve('foo')).to.equal('bar');
            cleanup();
            expect(session.get('topSpan').resolve('foo')).to.not.exist();
            delete TransportInterface._FIELDS['test.scope'];
            Shimmer.unwrap(Ecosystem, 'trace');
            TransportInterface._FIELDS.pop();
            done();
        });
    });

    it('should cover the propagation chain with null trigger', { plan: 2 }, (done) => {

        Ecosystem.trace = Ecosystem.trace || function () {};

        const todo = TransportInterface.shouldPropagate('tests.scope');
        expect(todo.fields).to.equal([]);
        expect(todo.trigger).to.equal(null);

        const cleanup = TransportInterface.propagate({ foo: 'bar' }, null);
        cleanup();
        done();
    });
});
