/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();
const beforeEach = lab.beforeEach;

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Metric = require('../../../lib/metric');
let Collect = require('../../../lib/metric/collect');
const SqreenSDK = require('sqreen-sdk');

describe('Metric', () => {

    beforeEach((done) => {

        Metric._clearAllMetrics();
        Collect = require('../../../lib/metric/collect');
        SqreenSDK.initBatch(10000, 10000, () => Promise.resolve());
        require('../../../lib/command/features').featureHolder.use_signals = true;
        done();
    });

    describe('Collect', () => {

        it('should create a collect metric', { plan: 3, timeout: 20000 }, (done) => {

            Metric.getAllReports(true);
            const collect = new Collect({
                kind: 'Collect',
                name: 'login-fail',
                period: 2
            });

            collect.add('key1', 1);
            collect.add('key2', 1);
            collect.add(null, 1);
            collect.add({ a: 1 }, 1);
            collect.add({ a: 1 }, 'hello');

            expect(Metric.getMetricByName('login-fail')).to.equal(collect);
            setTimeout(() => {

                collect.add('key1', 1);
                collect.add('key1', 1);
                collect.add('key3', 1);
            }, 3000);

            setTimeout(() => {

                Metric.getAllReports(true);
                const list = SqreenSDK.Signal.prototype.BATCH.data;
                expect(list[0].payload.values).to.equal([
                    { key: 'key1', value: [1] },
                    { key: 'key2', value: [1] },
                    { key: { a: 1 }, value: [1, 'hello'] }
                ]);
                expect(list[1].payload.values).to.equal([
                    { key: 'key1', value: [1, 1] },
                    { key: 'key3', value: [1] }
                ]);
                done();
            }, 6000);
        });
    });
});
