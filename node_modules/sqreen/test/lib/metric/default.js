/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();
const beforeEach = lab.beforeEach;

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Metric = require('../../../lib/metric');
const Default = require('../../../lib/metric/default');

const HEALTH = require('../../../lib/enums/metrics').HEALTH;

describe('Metric', () => {

    beforeEach((done) => {

        Metric._clearAllMetrics();
        require('../../../lib/command/features').featureHolder.use_signals = true;
        done();
    });

    describe('Default', () => {

        it('should enable/disable health metrics', { plan: 6 }, (done) => {

            Default.enableHealth();
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_1)).to.exist();
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_15)).to.exist();
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_5)).to.exist();

            Default.disableHealth();
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_1)).to.not.exist();
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_15)).to.not.exist();
            expect(Metric.getMetricByName(HEALTH.SYSTEM_LOAD_5)).to.not.exist();
            done();
        });

        it('should init enablePerfForRule', { plan: 2 }, (done) => {

            require('../../../lib/command/features').featureHolder.performance_metrics_period = 0;
            Default.enablePerfForRule('xxx');
            const metric = Metric.getMetricByName('xxx');
            expect(metric.period).to.equal(60000);
            require('../../../lib/command/features').featureHolder.performance_metrics_period = -1;
            Default.enablePerfForRule('yyy');
            const metric2 = Metric.getMetricByName('yyy');
            expect(metric2.period).to.equal(60000);
            done();
        });

        it('should start the default metric', { plan: 1 }, (done) => {

            Default.enableCallCount();
            const metric = Metric.getMetricByName('sqreen_call_counts');

            expect(metric.period).to.equal(60000);
            done();
        });

        it('should start the default metric with curtom time', { plan: 1 }, (done) => {

            Default.enableCallCount();
            Default.enableCallCount(70);
            const metric = Metric.getMetricByName('sqreen_call_counts');

            expect(metric.period).to.equal(70000);
            done();
        });

        it('should cover other metrics', { plan: 1 }, (done) => {

            Default.enableRequestOvertime(60);

            const metric = Metric.getMetricByName('request_overbudget_cb');

            expect(metric.period).to.equal(60000);
            done();
        });

        it('should cover other metrics', { plan: 1 }, (done) => {

            Default.enableMonitRequestOvertime(60);

            const metric = Metric.getMetricByName('monitoring_request_overbudget_cb');

            expect(metric.period).to.equal(60000);
            done();
        });

        it('shsould create and delete defauls monit metric', { plan: 2 }, (done) => {


            require('../../../lib/command/features').featureHolder.monitoring_performance_metrics_period = 'hello';

            Metric.addOneObservation(['sq.monit.aaaa', 'hello', 1]);
            let metric = Metric.getMetricByName('sq.monit.aaaa');

            expect(metric).to.exist();
            Default.disableMonitPerfMonitor();

            metric = Metric.getMetricByName('sq.monit.aaaa');

            expect(metric).to.not.exist();
            require('../../../lib/command/features').featureHolder.monitoring_performance_metrics_period = 60;

            done();
        });
    });
});
