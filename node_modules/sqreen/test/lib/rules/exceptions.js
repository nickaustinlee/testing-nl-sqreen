/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Cap = require('../../../lib/rules/exceptions');

const ALPHA = 0.00106049;

const trunk = function (nb) {

    return Math.floor(nb * 1e5) / 1e5;
};

describe('Rules exception cap', () => {

    it('should create a cap and compute diverse values', { plan: 5 }, (done) => {

        const cap = new Cap({ name: 'hello', rulesPack: 'pack' });

        cap.tick(false); // ema = X * (0 - 0) = 0
        cap.tick(false); // ema = X * (0 - 0) = 0
        cap.tick(false); // ema = X * (0 - 0) = 0
        cap.tick(false); // ema = X * (0 - 0) = 0
        expect(cap.ema).to.equal(0);
        cap.tick(true); // ema = X * (1 - 0) = X
        expect(cap.ema).to.equal(ALPHA);
        cap.tick(true); // ema = X + [X * (1 - X) = 2X - X^2
        expect(trunk(cap.ema)).to.equal(trunk(2 * ALPHA - ALPHA * ALPHA));
        cap.tick(true); // 3X - 2X^2
        expect(trunk(cap.ema)).to.equal(trunk(3 * ALPHA - 2 * ALPHA * ALPHA));
        cap.tick(false); // 2X^3 - 5X + 3X
        expect(trunk(cap.ema)).to.equal(trunk(2 * ALPHA * ALPHA * ALPHA - 5 * ALPHA * ALPHA + 3 * ALPHA));
        done();
    });

    it('should report a failling rule', { plan: 2 }, (done) => {

        const cap = new Cap({ name: 'hello', rulesPack: 'pack' });
        const Evt = require('../../../lib/events');
        const orig = Evt.writeEvent;
        Evt.writeEvent = function (type, value) {

            expect(value.signal_identifier).to.equal('rule:hello:pack');
            expect(value.infos).to.equal({
                kind: 'rule_deactivated',
                exception_cap_alpha: ALPHA,
                exception_cap_threshold_percentage: 10,
                current_ema_value: cap.ema,
                current_had_exception: 1,
                exception_klass: 'Error',
                exception_message: 'I am the error 99'
            });
            done();
            Evt.writeEvent = orig;
            return Promise.resolve();
        };

        for (let i = 0; i < 100; ++i) {
            cap.tick(true, new Error('I am the error ' + i));
        }
    });

    it('should report a failling rule with implicit error', { plan: 2 }, (done) => {

        const cap = new Cap({ name: 'hello', rulesPack: 'pack' });
        const Evt = require('../../../lib/events');
        const orig = Evt.writeEvent;
        Evt.writeEvent = function (type, value) {

            expect(value.signal_identifier).to.equal('rule:hello:pack');
            expect(value.infos).to.equal({
                kind: 'rule_deactivated',
                exception_cap_alpha: ALPHA,
                exception_cap_threshold_percentage: 10,
                current_ema_value: cap.ema,
                current_had_exception: 1,
                exception_klass: 'Error',
                exception_message: 'failed Error'
            });
            done();
            Evt.writeEvent = orig;
            return Promise.resolve();
        };

        for (let i = 0; i < 100; ++i) {
            cap.tick(true);
        }
    });
});
