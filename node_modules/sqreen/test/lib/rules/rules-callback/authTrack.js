/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const beforeEach = lab.beforeEach;
const afterEach = lab.afterEach;
const it = lab.it;
const expect = Code.expect;

const Shimmer = require('shimmer');

let Feature;
let Metrics;
let Pre;
describe('authTrack cb', () => {

    beforeEach((done) => {

        Feature = require('../../../../lib/command/features');
        Feature.featureHolder.use_signals = true;
        Metrics = Feature.getMetrics();
        Pre = require('../../../../lib/rules/rules-callback/authTrack').getCbs().pre;
        done();
    });

    afterEach((done) => {

        Metrics.addObservations.__unwrap && Metrics.addObservations.__unwrap();
        done();
    });

    it('should test the callback', { plan: 4 }, (done) => {

        Shimmer.wrap(Metrics, 'addObservations', () => {

            return function (metricList) {

                expect(metricList).to.have.length(1);
                const met = metricList[0];
                const name = met[0];
                const key = JSON.parse(met[1]);
                const val = met[2];
                expect(name).to.equal('sdk-login-success');
                expect(key).to.equal({ keys: [['username', 'foo']], ip: '156.67.29.54' });
                expect(val).to.equal(1);
                done();
            };
        });

        Pre([true, { username: 'foo' }], null, null, null, {
            req: {
                headers: {
                    'x-forwarded-for': '156.67.29.54'
                }
            }
        });
    });

    it('should test the callback', { plan: 4 }, (done) => {

        Shimmer.wrap(Metrics, 'addObservations', () => {

            return function (metricList) {

                expect(metricList).to.have.length(1);
                const met = metricList[0];
                const name = met[0];
                const key = JSON.parse(met[1]);
                const val = met[2];
                expect(name).to.equal('sdk-login-fail');
                expect(key).to.equal({ keys: [['username', 'foo']], ip: '156.67.29.54' });
                expect(val).to.equal(1);
                done();
            };
        });

        Pre([false, { username: 'foo' }], null, null, null, {
            req: {
                headers: {
                    'x-forwarded-for': '156.67.29.54'
                }
            }
        });
    });

    it('should cover limit cases', { plan: 0 }, (done) => {

        Shimmer.wrap(Metrics, 'addObservations', () => {

            return function () {

                done(new Error('should not have been called'));
            };
        });

        Pre([true], null, null, null, {
            req: {
                headers: {
                    'x-forwarded-for': '156.67.29.54'
                }
            }
        });

        Pre([true, {}], null, null, null, {
            req: {
                headers: {
                    'x-forwarded-for': '156.67.29.54'
                }
            }
        });
        Pre([true, {}], null, null, null);
        Pre([true, {}], null, null, null, {});
        Pre([true, {}], null, null, null, { req: {} });
        done();
    });
});
