/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Proxyquire = require('proxyquire');
const Util = require('../../../testUtils');

const CBPath = '../../../../lib/rules/rules-callback/bindingAccessorCollector';

describe('BACollector', () => {

    it('should collect stuff', { plan: 6 }, (done) => {

        let i = 0;
        const dpStub = {
            write: function (rule, info) {

                ++i;
                expect(rule.name).to.equal('collect');
                if (i === 1) {
                    expect(info).to.equal({
                        type: 'mysql',
                        data: [
                            {
                                key: 'password',
                                value: {
                                    score: 3,
                                    crack_times_seconds: {
                                        online_throttling_100_per_hour: 3610452024,
                                        online_no_throttling_10_per_second: 10029033.4,
                                        offline_slow_hashing_1e4_per_second: 10029.0334,
                                        offline_fast_hashing_1e10_per_second: 0.0100290334
                                    },
                                    crack_times_display: {
                                        online_throttling_100_per_hour: 'centuries',
                                        online_no_throttling_10_per_second: '4 months',
                                        offline_slow_hashing_1e4_per_second: '3 hours',
                                        offline_fast_hashing_1e10_per_second: 'less than a second'
                                    }
                                }
                            },
                            {
                                key: 'username',
                                value: 'username'
                            },
                            {
                                key: 'password_eq_username',
                                value: false
                            }
                        ]
                    });
                }
                else if (i === 2) {
                    expect(info).to.equal({
                        type: 'mysql',
                        data: [
                            {
                                key: 'password',
                                value: {
                                    crack_times_display: {
                                        offline_fast_hashing_1e10_per_second: 'no password',
                                        offline_slow_hashing_1e4_per_second: 'no password',
                                        online_no_throttling_10_per_second: 'no password',
                                        online_throttling_100_per_hour: 'no password'
                                    },
                                    crack_times_seconds: {
                                        offline_fast_hashing_1e10_per_second: 0,
                                        offline_slow_hashing_1e4_per_second: 0,
                                        online_no_throttling_10_per_second: 0,
                                        online_throttling_100_per_hour: 0
                                    },
                                    score: -1
                                }
                            },
                            {
                                key: 'username',
                                value: ''
                            },
                            {
                                key: 'password_eq_username',
                                value: true
                            }
                        ]
                    });
                }
                else if (i === 3) {
                    expect(info).to.equal({ data: [{}, {}, {}], type: 'mysql' });
                    done();
                }
            }
        };
        Util.validateStub(require('../../../../lib/data_point'), dpStub);
        const CB = Proxyquire(CBPath, {
            '../../data_point': dpStub
        });
        const pre = CB.getCbs({
            name: 'collect',
            rulespack_id: '0',
            signature: {
                v0_9: {
                    keys: [
                        'data'
                    ]
                }
            },
            data: {
                filter: {},
                values: [
                    {
                        type: 'mysql',
                        collect: [
                            { ba: '#.inst[\'config\'][\'password\'] | grade_password', key: 'password' },
                            { ba: '#.inst[\'config\'][\'user\']', key: 'username' },
                            { ba: { '%equals': ['#.inst[\'config\'][\'password\']', '#.inst[\'config\'][\'user\']'] }, key: 'password_eq_username' }
                        ],
                        unique: '#.inst[\'config\']'
                    }
                ]
            }
        }).pre;

        const config = {
            password: 'hello world',
            user: 'username'
        };
        const config2 = Object.assign({}, config);

        pre({}, {}, {}, { config }, {});
        pre({}, {}, {}, { config }, {});
        pre({}, {}, {}, { config: config2 }, {});
        pre({}, {}, {}, { config: { } }, {});
        pre({}, {}, {}, {}, {});
    });

    it('should collect stuff w/o unique', { plan: 2 }, (done) => {

        const dpStub = {
            write: function (rule, info) {

                expect(rule.name).to.equal('collect');
                expect(info).to.equal({
                    type: 'mysql',
                    data: [
                        {
                            key: 'password',
                            value: {
                                score: 3,
                                crack_times_seconds: {
                                    online_throttling_100_per_hour: 3610452024,
                                    online_no_throttling_10_per_second: 10029033.4,
                                    offline_slow_hashing_1e4_per_second: 10029.0334,
                                    offline_fast_hashing_1e10_per_second: 0.0100290334
                                },
                                crack_times_display: {
                                    online_throttling_100_per_hour: 'centuries',
                                    online_no_throttling_10_per_second: '4 months',
                                    offline_slow_hashing_1e4_per_second: '3 hours',
                                    offline_fast_hashing_1e10_per_second: 'less than a second'
                                }
                            }
                        },
                        { key: 'username', value: 'username' }]
                });
                done();
            }
        };
        Util.validateStub(require('../../../../lib/data_point'), dpStub);
        const CB = Proxyquire(CBPath, {
            '../../data_point': dpStub
        });
        const pre = CB.getCbs({
            name: 'collect',
            rulespack_id: '0',
            signature: {
                v0_9: {
                    keys: [
                        'data'
                    ]
                }
            },
            data: {
                filter: {},
                values: [
                    {
                        type: 'mysql',
                        collect: [
                            { ba: '#.inst[\'config\'][\'password\'] | grade_password', key: 'password' },
                            { ba: '#.inst[\'config\'][\'user\']', key: 'username' }
                        ]
                    }
                ]
            }
        }).pre;

        const config = {
            password: 'hello world',
            user: 'username'
        };

        pre({}, {}, {}, { config }, {});
    });

    it('should trigger coverage', { plan: 0 }, (done) => {

        const dpStub = {
            write: function (rule, info) {}
        };
        Util.validateStub(require('../../../../lib/data_point'), dpStub);
        const CB = Proxyquire(CBPath, {
            '../../data_point': dpStub
        });
        const pre = CB.getCbs({
            name: 'collect',
            signature: {
                v0_9: {
                    keys: [
                        'data'
                    ]
                }
            },
            rulespack_id: '0',
            data: {
                filter: {},
                values: [
                    {
                        type: 'mysql',
                        collect: [],
                        unique: '#.inst[\'config\']'
                    }
                ]
            }
        }).pre;


        pre({}, {}, {}, { config: 1 }, {});
        pre({}, {}, {}, { config: null }, {});
        done();
    });

});

