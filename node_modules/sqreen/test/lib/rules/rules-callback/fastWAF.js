/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const GetCB = require('../../../../lib/rules/rules-callback').LibSqreenCB;

const Nuke = require('./nuke');
const time = function (cb) {

    const t = process.hrtime();
    const result = cb();
    const dur = process.hrtime(t);
    const duration = dur[0] * 1000 + dur[1] / 1e6; // milliseconds
    return { result, duration };
};

const waf_rules = JSON.stringify({
    rules: [
        {
            'rule_id': '1',
            'filters': [
                {
                    'operator': '@rx',
                    'targets': [
                        '#.client_ip'
                    ],
                    'value': '127.0.0.1'
                }
            ]
        }
    ],
    'flows': [
        {
            'name': 'flow1',
            'steps': [
                {
                    'id': 'start',
                    'rule_ids': [
                        '1'
                    ],
                    'on_match': 'exit_block'
                }
            ]
        }
    ]
});

const run = function () {

    it('should call the waf with a huge object in a descent time', { plan: 1 }, (done) => {

        const Cb = GetCB({
            data: {
                values: {
                    waf_rules,
                    binding_accessors: [
                        '#.filtered_request_params | flat_keys'
                    ]
                }
            }
        });

        const req = {
            body: Nuke
        };
        const results = time(() => Cb.pre({}, {}, {}, {}, { req }, 3));
        expect(results.duration).to.be.below(3.5);
        done();
    });

    it('should call the waf with a huge object in a descent time', { plan: 1 }, (done) => {

        const Cb = GetCB({
            data: {
                values: {
                    waf_rules,
                    binding_accessors: [
                        '#.filtered_request_params | flat_values'
                    ]
                }
            }
        });

        const req = {
            body: Nuke
        };
        const results = time(() => Cb.pre({}, {}, {}, {}, { req }, 1));
        expect(results.duration).to.be.below(3.5);
        done();
    });
};

const Os = require('os');
const Semver = require('semver');

const canRun = Semver.satisfies(process.version, '>4')
    && Os.arch() === 'x64'
    && (Os.platform() !== 'win32' || Semver.satisfies(process.version, '>=8'));

if (canRun) {
    describe('LibSqreen', run);
}
