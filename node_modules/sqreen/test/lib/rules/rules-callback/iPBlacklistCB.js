/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const IpBL = require('../../../../lib/rules/rules-callback/iPBlacklistCB');

describe('iPBlacklistCB', () => {

    describe('pre', () => {

        it('should create the cb and do what it should', { plan: 8 }, (done) => {

            const curr = IpBL.getCBs({ data: { values: ['192.168.0.1', '172.168.0.0/24'] } });

            expect(curr.pre(['192.168.0.1'])).to.equal({ status: 'raise', observations: [['blacklisted', '192.168.0.1', 1]] });
            expect(curr.pre(['172.168.0.1'])).to.equal({ status: 'raise', observations: [['blacklisted', '172.168.0.0/24', 1]] });
            expect(curr.pre(['172.165.0.1'])).to.equal(null);
            expect(curr.pre([''])).to.equal(null);
            expect(curr.pre(['fds;ldf;lkfdghfds;gjh'])).to.equal(null);
            expect(curr.pre(['::1'])).to.equal(null);
            expect(curr.pre(['1.2.3.4:42'])).to.equal(null);
            try {
                const values = new Array(1e5).fill(0);
                IpBL.getCBs({ data: { values } });
            }
            catch (e) {
                expect(e).to.exist();
            }
            done();
        });
    });
});
