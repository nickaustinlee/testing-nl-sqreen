/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const beforeEach = lab.beforeEach;
const afterEach = lab.afterEach;
const it = lab.it;
const expect = Code.expect;

const Shimmer = require('shimmer');

let Feature;
let Metrics;
let Pre;
describe('passport-local-metric', () => {

    beforeEach((done) => {

        Feature = require('../../../../lib/command/features');
        Feature.featureHolder.use_signals = true;
        Metrics = Feature.getMetrics();
        Pre = require('../../../../lib/rules/rules-callback/passportLocalMetric').getCbs().pre;
        done();
    });

    afterEach((done) => {

        Metrics.addObservations.__unwrap && Metrics.addObservations.__unwrap();
        done();
    });

    it('should patch and check an auth', { plan: 4 }, (done) => {

        Shimmer.wrap(Metrics, 'addObservations', () => {

            return function (obs) {

                expect(obs).to.exist();
                expect(obs[0][0]).to.equal('auto-login-fail');
                const part = JSON.parse(obs[0][1]);
                expect(part.keys[0][0]).to.equal('username');
                expect(part.keys[0][1]).to.equal('jean');
                done();
            };
        });


        const args = [
            'jean',
            function () {}
        ];

        Pre(args, null, null, null, null);
        args[1]();
    });

    it('should patch and check an auth', { plan: 4 }, (done) => {

        Shimmer.wrap(Metrics, 'addObservations', () => {

            return function (obs) {

                expect(obs).to.exist();
                expect(obs[0][0]).to.equal('auto-login-fail');
                const part = JSON.parse(obs[0][1]);
                expect(part.keys[0][0]).to.equal('username');
                expect(part.keys[0][1]).to.equal('jean');
                done();
            };
        });

        const args = [
            {},
            'jean',
            function () {}
        ];

        Pre(args, null, null, { _passReqToCallback: true }, {});
        args[2]();
    });

    it('should patch and check an auth with fail', { plan: 4 }, (done) => {

        Shimmer.wrap(Metrics, 'addObservations', () => {

            return function (obs) {

                expect(obs).to.exist();
                expect(obs[0][0]).to.equal('auto-login-fail');
                const part = JSON.parse(obs[0][1]);
                expect(part.keys[0][0]).to.equal('username');
                expect(part.keys[0][1]).to.equal('jean');
                done();
            };
        });

        const args = [
            'jean',
            function () {}
        ];

        Pre(args, null, null, null, { req: { headers: {} , connection: {} } });
        args[1](new Error());
    });

    it('should patch and check an auth with specific name and ip', { plan: 4 }, (done) => {

        Shimmer.wrap(Metrics, 'addObservations', () => {

            return function (obs) {

                expect(obs).to.exist();
                expect(obs[0][0]).to.equal('auto-login-fail');
                const part = JSON.parse(obs[0][1]);
                expect(part.keys[0][0]).to.equal('pony');
                expect(part.keys[0][1]).to.equal('jean');
                done();
            };
        });

        const args = [
            'jean',
            function () {}
        ];

        Pre(args, null, null, { _usernameField: 'pony' }, { req: { headers: {}, connection: { remoteAddress: 'ip' } } });
        args[1]();
    });

    it('should patch and check an auth with specific name and ip', { plan: 5 }, (done) => {

        Shimmer.wrap(Metrics, 'addObservations', () => {

            return function (obs) {

                expect(obs).to.exist();
                expect(obs[0][0]).to.equal('auto-login-success');
                const part = JSON.parse(obs[0][1]);
                expect(part.keys[0][0]).to.equal('username');
                expect(part.ip).to.equal('195.168.12.110');
                expect(part.keys[0][1]).to.equal('jean');
                done();
            };
        });

        const args = [
            'jean',
            function () {}
        ];

        Pre(args, null, null, { }, { req: { headers: { 'x-forwarded-for': '195.168.12.110' } } });
        args[1](null, {});
    });
});
