/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const afterEach = lab.afterEach;
const beforeEach = lab.beforeEach;
const it = lab.it;
const expect = Code.expect;

const Shimmer = require('shimmer');
let Metric;
const Pre = require('../../../../lib/rules/rules-callback/passportSAMLMetric').getCbs().pre;

describe('passport-local-metric', () => {

    beforeEach((done) => {

        Metric = require('../../../../lib/command/features').getMetrics();
        done();
    });

    afterEach((done) => {

        if (Metric.addObservations.__unwrap) {
            Metric.addObservations.__unwrap();
        }
        done();
    });

    it('should patch and check an auth', { plan: 4 }, (done) => {

        Shimmer.wrap(Metric, 'addObservations', () => {

            return function (obs) {

                expect(obs).to.exist();
                expect(obs[0][0]).to.equal('auto-login-success');
                const part = JSON.parse(obs[0][1]);
                expect(part.keys[0][0]).to.equal('username');
                expect(part.keys[0][1]).to.equal('jean');
                done();
            };
        });

        const args = [
            {},
            function () {}
        ];

        Pre(args, null, null, null, null);
        args[1](null, { username: 'jean' });
    });

    it('should patch and check an auth 2', { plan: 0 }, (done) => {

        Shimmer.wrap(Metric, 'addObservations', () => {

            return function () {

                done(new Error());
            };
        });

        const args = [
            {},
            function () {}
        ];

        Pre(args, null, null, null, {});
        args[1](null, { username: undefined });
        Metric.addObservations.__unwrap();
        done();
    });


    it('should patch and check an auth 3', { plan: 0 }, (done) => {

        Shimmer.wrap(Metric, 'addObservations', () => {

            const res = function () {

                done(new Error());
                res.__unwrap();
            };
            return res;
        });
        const args = [
            {},
            function () {}
        ];

        Pre(args, null, null, null, { req: {} });
        args[1](null, { pony: 'jean' });
        done();
    });

    it('should patch and check an auth 4', { plan: 4 }, (done) => {

        Shimmer.wrap(Metric, 'addObservations', () => {

            return function (obs) {

                expect(obs).to.exist();
                expect(obs[0][0]).to.equal('auto-login-fail');
                const part = JSON.parse(obs[0][1]);
                expect(part.keys[0][0]).to.equal('username');
                expect(part.keys[0][1]).to.equal('jean');
                done();
            };
        });

        const args = [
            {},
            function () {}
        ];

        Pre(args, null, null, null, { req:  { headers: { 'x-forwarded-for': '8.8.8.8' } } });
        args[1](new Error(), { username: 'jean' });
    });
});
