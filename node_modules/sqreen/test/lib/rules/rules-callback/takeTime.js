/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const GetCB = require('../../../../lib/rules/rules-callback').TakeTimeCB;

describe('TakeTimeCB', () => {

    it('should test the cb', { plan: 8 }, (done) => {

        expect(GetCB(null)).to.not.exist();
        expect(GetCB({})).to.not.exist();
        expect(GetCB({ data: {} })).to.not.exist();
        expect(GetCB({ data: { values: [] } })).to.not.exist();
        expect(GetCB({ data: { values: [20] } })).to.exist();

        const cb10ms = GetCB({ data: { values: [20] } });

        const t0 = process.hrtime();
        const res = cb10ms.pre();
        const tSpent = process.hrtime(t0);
        const tSpentMs = require('../../../../lib/instrumentation/utils').mergeHrtime(tSpent);

        expect(res.status).to.equal('raise');
        expect(tSpentMs).to.be.below(34); // Windows...
        expect(tSpentMs).to.be.above(19);
        done();
    });

    it('should test the cb again', { plan: 2 }, (done) => {

        const cb10ms = GetCB({ data: { values: [20, 100] } });

        const t0 = process.hrtime();
        const res = cb10ms.pre();
        const tSpent = process.hrtime(t0);
        const tSpentMs = require('../../../../lib/instrumentation/utils').mergeHrtime(tSpent);

        expect(res.status).to.equal('raise');
        expect(tSpentMs).to.be.below(12);
        done();
    });
});
