/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Signature = require('../../../lib/rules/signature');


describe('Signature', () => {

    describe('_normalize', () => {

        it('should normalize Arrays content', { plan: 1 }, (done) => { /* eslint-disable */

            const r1 = { a: { b: { c: [{ z: 1, y: 2 }] } } };
            const r2 = { a: { b: { c: [{ y: 2, z: 1 }] } } };

            const normR1 = Signature._normalize(r1);
            const normR2 = Signature._normalize(r2);
            expect(normR1).to.equal(normR2);
            done();
        });

        it('should serialize objects as wanted', { plan: 7 }, (done) =>  {

            expect(Signature._normalize({ '1': [] })).to.equal('{"1":[]}');
            expect(Signature._normalize({ '1': [1, 2, 3] })).to.equal('{"1":[1,2,3]}');
            expect(Signature._normalize([1, '2', 3])).to.equal('[1,"2",3]');
            expect(Signature._normalize({ '1': [1, '2', 3] })).to.equal('{"1":[1,"2",3]}');
            expect(Signature._normalize({ '1': [1, '2', { z: 'w' }] })).to.equal('{"1":[1,"2",{"z":"w"}]}');

            const rule = {
                'a' : 2,
                'b' : {
                    'c' : 1,
                    'd' : 2
                }
            };
            const rule_str = '{"a":2,"b":{"c":1,"d":2}}';
            expect(Signature._normalize(rule)).to.equal(rule_str);

            const rule_unordered = {
                'b' : {
                    'd' : 2,
                    'c' : 1
                },
                'a' : 2
            };
            expect(Signature._normalize(rule_unordered)).to.equal(rule_str);
            done();
        });
    });

    describe('_getNormalizedPayload', () => {

        it('should return the normalized payload', { plan: 1 }, (done) =>  {

            const rule = {
                signature: {
                    v_0: {
                        keys: [
                            'hookpoint',
                            'name',
                            'callbacks',
                            'conditions'
                        ]
                    }
                },
                hookpoint: 1,
                name: [1, 2],
                callbacks: {},
                conditions: {}
            };
            const result = Signature._getNormalizedPayload(rule);
            expect(result.payload).to.equal('{"callbacks":{},"conditions":{},"hookpoint":1,"name":[1,2]}');
            done();
        });

        it('should return the normalized payload in a specific version', { plan: 1 }, (done) =>  {

            const rule = {
                signature: {
                    v0_9: {
                        keys: [
                            'hookpoint',
                            'name',
                            'callbacks',
                            'conditions',
                            'a',
                            'b'
                        ]
                    }
                },
                a: 1,
                b: [1, 2],
                callbacks: {},
                conditions: {}
            };
            const result = Signature._getNormalizedPayload(rule, 'v0_9');
            expect(result.payload).to.equal('{"a":1,"b":[1,2],"callbacks":{},"conditions":{}}');
            done();
        });
    });

    describe('verifyRuleSignature', () => {

        it('should verify a rule', { plan: 1 }, (done) =>  {

            const rule = {
                attack_type: 'no_attack',
                block: false,
                description: 'Insert custom Sqreen headers',
                framework: 'Rails',
                hookpoint: {
                    callback_class: 'HeadersInsertCB',
                    klass: 'Rack::Runtime',
                    method: 'call'
                },
                language: 'ruby',
                name: 'insert_header_rack',
                priority: 99,
                signature: {
                    v0_9: {
                        keys: [
                            'hookpoint',
                            'name',
                            'callbacks',
                            'conditions'
                        ],
                        value: 'MIGHAkFnmeFaKdE05vmp7FLqNPhLk0peJV5w0Icig/nRDU+Bhon5F2vLySTkX8FeIx3FphHhRVMa\ntzhDFfXceq4fKherxQJCANw15ANJX/AHpAGuXNn+uZwW+pmuGt2ZlG7rh1TkYyOTLY3UTjEWVGfV\nK1XeOyZgwp4lB6GRotYZEpcaxchEfisC\n'
                    }
                },
                test: false,
                title: 'Headers insertion'
            };

            expect(Signature.verifyRuleSignature(rule)).to.be.true();
            done();
        });

        it('should not verify a rule', { plan: 1 }, (done) =>  {

            const rule = {
                attack_type: 'no_attack',
                block: false,
                description: 'Insert custom Sqreen headers',
                framework: 'Rails',
                hookpoint: {
                    callback_class: 'HeadersInsertCB1',
                    klass: 'Rack::Runtime',
                    method: 'call'
                },
                language: 'ruby',
                name: 'insert_header_rack',
                priority: 99,
                signature: {
                    v0_9: {
                        keys: [
                            'hookpoint',
                            'name',
                            'callbacks',
                            'conditions'
                        ],
                        value: 'MIGHAkFnmeFaKdE05vmp7FLqNPhLk0peJV5w0Icig/nRDU+Bhon5F2vLySTkX8FeIx3FphHhRVMa\ntzhDFfXceq4fKherxQJCANw15ANJX/AHpAGuXNn+uZwW+pmuGt2ZlG7rh1TkYyOTLY3UTjEWVGfV\nK1XeOyZgwp4lB6GRotYZEpcaxchEfisC\n'
                    }
                },
                test: false,
                title: 'Headers insertion'
            };

            expect(Signature.verifyRuleSignature(rule)).to.be.false();
            done();
        });
    });
});
