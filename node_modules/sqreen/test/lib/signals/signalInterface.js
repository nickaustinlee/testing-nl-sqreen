/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const SignalInterface = require('../../../lib/signals/signalInterface');

describe('SignalInterface', () => {

    it('should create and report a point', { plan: 3 }, (done) => {

        const builder = SignalInterface.createPoint('name');
        expect(builder.point.batch).to.exist();
        builder.point.batch = function () {

            delete this.batch;
            expect(this.time).to.exist();
            delete this.time;
            expect(this).to.equal({
                type: 'point',
                signal_name: 'name',
                actor: {
                    foo: 'bar'
                },
                location_infra: {
                    host: 'xx'
                },
                location: {
                    backtrace: []
                },
                source: 'sqreen:agent',
                trigger: {},
                payload_schema: 'a',
                payload: {},
                context_schema: 'b',
                context: {}
            });
            done();
        };

        builder
            .actor({ foo: 'bar' })
            .locationInfra({ host: 'xx' })
            .location({ backtrace: [] })
            .trigger({})
            .payload('a', {})
            .context('b', {})
            .report();
    });

    it('should create a point within a trace', { plan: 3 }, (done) => {

        const NS = require('../../../lib/instrumentation/hooks/ns').getNS();
        const Record = require('../../../lib/instrumentation/record');

        const req = {};
        const record = new Record.RecordTrace(req, '');
        NS.run(() => {

            NS.set('req', req);
            const builder = SignalInterface.createPoint('name');
            expect(builder.record).to.equal(record);
            builder.report();
            expect(record._meta.mustReport).to.be.true();
            expect(record.data.indexOf(builder.point) > -1).to.be.true();
            done();
        });
    });
});
