/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Rules = require('../../../lib/rules');
const Patcher = require('../../../lib/instrumentation/patcher');
const NS = require('../../../lib/instrumentation/hooks/ns');
const Budget = require('../../../lib/instrumentation/budget');

describe('story:', () => {

    describe('Async Callback', () => {

        it('should patch a known module and add an async callback', { plan: 6 }, (done) => {

            require('../../../lib/command/features').featureHolder.use_signals = true;
            const ns = NS.getNS();
            const module = {
                a: function (a, b, cb) {

                    return cb(null, a + b);
                }
            };

            Patcher.placePatch({
                moduleName: 'module1',
                file: './index.js',
                methodName: 'a'
            });

            module.a.prototype = null;

            const result1 = Patcher.patchModule(module, { name: 'module1', relativePath: './index.js' }, 'mod');

            expect(result1.a.__wrapped).to.not.exist();

            const rule = {
                name: 'my.story.rule',
                callbacks: {
                    async_post: [
                        '#.req',
                        'function (x) { x.a = 11; return { observations: [[\'my.metric\', \'a\', 1]] }; }'
                    ]
                },
                hookpoint: {
                    klass: 'module1:./index.js',
                    method: 'a'
                },
                metrics: [
                    {
                        name: 'my.metric',
                        kind: 'Sum',
                        period: 60
                    }
                ]
            };

            Rules.enforceRuleList([rule], true);

            expect(result1.a.__wrapped).to.be.true();

            ns.run(() => {

                const req = {};
                ns.set('req', req);
                ns.set('budget', Budget.INFINITY);
                module.a(1, 1, (err, res) => {

                    expect(err).to.not.exist();
                    expect(res).to.equal(2);
                    expect(req.a).to.equal(11);

                    require('../../../lib/metric/index').getAllReports(true);
                    const metric = require('sqreen-sdk').Signal.prototype.BATCH.data.find((x) => x.signal_name === 'sq.agent.metric.my.metric');
                    expect(metric.payload.values[0]).to.equal({ key: 'a', value: 1 });
                    done();
                });
            });
        });

    });
});
