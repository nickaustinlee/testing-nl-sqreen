/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Express = require('express');
const Supertest = require('supertest');
require('../../../lib/instrumentation/hooks/expressHook')({}, Express);
const Rules = require('../../../lib/rules');
const Budget = require('../../../lib/instrumentation/budget');
const SYNC_BLOCK = require('../../../lib/enums/agent').SYNC_BLOCKING;
const kSQREEN_SYNC_BLOCKING = require('../../../lib/enums/agent').kSQREEN_SYNC_BLOCKING;

/*eslint-disable */

describe('Stories', () => {

    describe('Express', () => {

        it('should intercept error handling on behalf of Sqreen', { plan: 2 },(done) => {

            const app = Express();

            app.use((req, res, next) => {

                const err = new Error(SYNC_BLOCK);
                err[kSQREEN_SYNC_BLOCKING] = true;
                next(err);
            });

            app.use((err, req, res, next) => {

                done(new Error('should not have been called'));
            });

            Supertest(app)
                .get('/')
                .end((err, res) => {

                    expect(err).to.not.exist();
                    expect(res.status).to.equal(500); // default rule-less value
                    done();
                });
        });

        it('should not intercept error handling on behalf of Sqreen', { plan: 2 },(done) => {

            const app = Express();

            app.use((req, res, next) => {

                next(new Error('err'));
            });

            app.use((err, req, res, next) => {

                res.status(599).send('OK');
            });

            Supertest(app)
                .get('/')
                .end((err, res) => {

                    expect(err).to.not.exist();
                    expect(res.status).to.equal(599); // default rule-less value
                    done();
                });
        });

        it('should insert the middleware multiple times but apply only once', (done) => {

            const ZERO = Budget.ZERO;
            Budget.ZERO = Budget.INFINITY;
            const fct = function (body) {

                body.x.push(1);
            };
            const rule = {
                hookpoint: {
                    arguments_options: {},
                    klass: 'sqreen',
                    method: 'express:sqreenMiddleWare'
                },
                callbacks: {
                    pre: [
                        '#.request_params[\'body\']',
                        fct.toString()
                    ]
                }
            };
            Rules.enforceRuleList([rule], true);

            const app = Express();

            const bod = { a: 1, x: [] };

            app.use(Express.json());
            app.use(Express.urlencoded());
            app.use((req, res, next) => {

                next();
            });
            app.post('/', (req, res) => {

                expect(req.body).to.equal({ a: 1, x: [1] });
                res.end('ok');
            });

            Supertest(app)
                .post('/')
                .send(bod)
                .end((err) => {

                    expect(err).to.not.exist();
                    Budget.ZERO = ZERO;
                    done();
                });

        });
    });
});
/*eslint-enable */



