'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const HTTP = require('http');
const Express = require('express');
const Semver = require('semver');


const main = function () {

    const Request = require('../../../lib/fuzzer/fakerequest');

    it('should create a server and inject a GET Request into it', { plan: 2 }, (done) => {

        const OnFinished = require('on-finished');
        const app = Express();

        app.use((req, res, next) => {

            OnFinished(res, (e) => done(e));
            next();
        });

        app.get('/aaa/:id', (req, res) => {

            expect(req.query.a).to.equal('1');
            res.end(req.params.id);
        });

        const server = HTTP.createServer(app);

        Request(server, {})
            .get('/aaa/10?a=1')
            .end((req, res) => {

                expect(res.statusCode).to.equal(200);
            });
    });

    it('should create a server and inject a POST Request into it', { plan: 2 }, (done) => {

        const app = Express();

        app.use(Express.raw());
        app.use(Express.json());

        app.post('/', (req, res) => {

            expect(req.body).to.equal({ hello: 'world' });
            res.end(req.params.id);
        });

        const server = HTTP.createServer(app);

        Request(server, {})
            .post('/')
            .send({ hello: 'world' })
            .end((req, res) => {

                expect(res.statusCode).to.equal(200);
                done();
            });
    });

    if (Semver.satisfies(process.version, '> 12.0.0')) {

        const str = `it('should cover for await reading of request', { plan: 1 }, (done) => {

const handler = async function (req) {

    let bod = '';
    for await (const chunk of req) {
        bod += chunk.toString();
    }

    expect(JSON.parse(bod)).to.equal({ hello: 'world' });

    return 'ok';
};

const server = HTTP.createServer((req, res) => {

    return handler(req, res)
        .then((x) => res.end(x))
        .catch((e) => done(e));
});

Request(server, {})
    .post('/aaa?x=10')
    .send({ hello: 'world' })
    .end(() => done());
});`;
        eval(str);// eslint-disable-line
    }

    it('should check with Request record', { plan: 19 }, (done) => {

        const Record = require('../../../lib/instrumentation/record');
        Record.switchInstru(true);
        const fake = Request(null, {}).get('/aaa?x=10');
        fake._req.__sqreen_replayed = true;

        const record = new Record.RecordTrace(fake._req, '127.0.0.1', true);
        record._meta.mustReport = true;

        expect(record._meta.reportPayload).to.equal(false);
        record.close(fake._req, fake._res, 1000);
        expect(record.actor.ip_addresses).to.equal(['127.0.0.1']);
        expect(record.context.request.rid).to.equal(undefined);
        expect(record.context.request.endpoint).to.equal(undefined);
        expect(record.context.request.headers).to.equal([
            ['user-agent', 'Reveal 0.0.1'],
            ['host', 'localhost']
        ]);
        expect(record.context.request.user_agent).to.equal('Reveal 0.0.1');
        expect(record.context.request.scheme).to.equal('http');
        expect(record.context.request.verb).to.equal('GET');
        expect(record.context.request.host).to.equal('localhost');
        expect(record.context.request.remote_ip).to.equal('127.0.0.1');
        expect(record.context.request.remote_port).to.equal(80);
        expect(record.context.request.path).to.equal('/aaa?x=10');
        expect(record.context.request.referer).to.equal('https://reveal.sqreen.com');
        expect(record.context.request.parameters).to.equal({ json: null, query: undefined });
        expect(record.data).to.have.length(0);
        expect(record.context.response.status).to.equal(200);
        expect(record._meta).to.not.exist(true);
        expect(record.actor.credentials).to.not.exist();
        expect(record.context.request.isRevealReplayed).to.equal(true);
        done();
    });
};

if (Semver.satisfies(process.version, '>= 6.0.0')) {
    describe('Story.Reveal', main);
}
