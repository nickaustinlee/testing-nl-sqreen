/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const beforeEach = lab.beforeEach;
const it = lab.it;
const expect = Code.expect;

const Record = require('../../../lib_old/instrumentation/record');

const Shimmer = require('shimmer');
const Action = require('../../../lib/events/action');
const Event = require('../../../lib/events/index');

describe('Event.queue old', () => {

    beforeEach((done) => {

        require('../../../lib/command/features').featureHolder.use_signals = false;
        Event.drain();
        done();
    });

    describe('writeEvent', () => {

        it('should report a simple event 1', { plan: 2 }, (done) => {

            require('../../../lib/command/features').featureHolder.use_signals = false;
            Shimmer.wrap(Action, 'trigger', () => {

                return function (queue) {

                    expect(queue).to.be.an.array();
                    expect(queue).to.have.length(1);
                    Action.trigger.__unwrap();
                    done();
                };
            });

            Event.writeEvent('a', {});
        });

        it('should report a simple event 2', { plan: 3 }, (done) => {

            require('../../../lib/command/features').featureHolder.use_signals = false;
            Shimmer.wrap(Action, 'trigger', () => {

                return function (queue, f) {

                    expect(queue).to.be.an.array();
                    expect(queue).to.have.length(1);
                    expect(f).to.be.true();
                    Action.trigger.__unwrap();
                    done();
                };
            });

            Event.writeEvent('ATTACK', { rule_name: 'abcd' });
        });

        it('should report a simple event 3', { plan: 2 }, (done) => {

            require('../../../lib/command/features').featureHolder.use_signals = false;
            Shimmer.wrap(Action, 'trigger', () => {

                return function (queue) {

                    expect(queue).to.be.an.array();
                    expect(queue).to.have.length(1);
                    Action.trigger.__unwrap();
                    done();
                };
            });

            Event.writeEvent('ATTACK', { rule_name: 'a' });
        });

        it('should report a simple event', { plan: 2 }, (done) => {

            require('../../../lib/command/features').featureHolder.use_signals = false;
            Shimmer.wrap(Action, 'trigger', () => {

                return function (queue) {

                    expect(queue).to.be.an.array();
                    expect(queue).to.have.length(1);
                    Action.trigger.__unwrap();
                    done();
                };
            });

            Event.writeEvent('ATTACK', { klass: 'a' });
        });

        it('should report a request_record', { plan: 12 }, (done) => {

            const record = new Record.Record({
                __sqreen_uuid: 1
            });

            record.attack({
                rule_name: 'my-record-rule'
            });

            const record2 = new Record.Record({
                __sqreen_uuid: 1
            });

            record2.attack({
                rule_name: 'my-record-rule'
            });

            const record3 = new Record.Record({
                __sqreen_uuid: 1
            });

            record3.except({
                rule_name: 'my-record-rule'
            });

            const record4 = new Record.Record({
                __sqreen_uuid: 1
            });

            record4.except({
                rule_name: 'my-record-rule'
            });

            let count = 0;

            Shimmer.wrap(Action, 'trigger', () => {

                return function (queue, force) {

                    expect(queue).to.be.an.array();
                    expect(queue).to.have.length(1 + count);
                    if (count === 0) {
                        expect(force).to.be.true();
                    }
                    else if (count === 1) {
                        expect(force).to.be.false();
                    }
                    else if (count === 2) {
                        expect(force).to.be.true();
                    }
                    else {
                        expect(force).to.be.false();
                        Action.trigger.__unwrap();
                        done();
                    }
                    count++;
                };
            });

            Event.writeEvent('request_record', record);
            Event.writeEvent('request_record', record2);
            Event.writeEvent('request_record', record3);
            Event.writeEvent('request_record', record4);
        });


        it('should drop first events when the queue is too long', { plan: 4 }, (done) => {

            Shimmer.wrap(Action, 'trigger', () => {

                return function () {};
            });

            for (let i = 0; i < 500; ++i) {

                Event._eventQueue.push({ type: i, event: i });
            }

            expect(Event._eventQueue).to.have.length(500);
            Event.writeEvent('a', {})
                .then(() => {

                    expect(Event._eventQueue).to.have.length(500);
                    expect(Event._eventQueue.pop()).to.equal({ type: 'a', event: {} });
                    expect(Event._eventQueue.shift()).to.equal({ type: 1, event: 1 });

                    done();
                });
        });
    });
});
