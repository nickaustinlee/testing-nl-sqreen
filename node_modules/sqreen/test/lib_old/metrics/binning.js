/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();
const beforeEach = lab.beforeEach;

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Metric = require('../../../lib_old/metric');
const Binning = require('../../../lib_old/metric/binning');

describe('Metric Old', () => {

    beforeEach((done) => {

        Metric._clearAllMetrics();
        require('../../../lib/command/features').featureHolder.use_signals = false;
        done();
    });

    describe('Binning', () => {

        it('should create a binning metric', { plan: 2, timeout: 20000 }, (done) => {

            const metric = new Binning({
                kind: 'Binning',
                name: 'bin-stuff',
                period: 2.5
            }, { base: 2, factor: 0.1 });

            const now = new Date();
            Metric.addBinningObservation('bin-stuff', 150, now);
            Metric.addBinningObservation('no-bin-stuff', 150, now);
            metric.add(-10, now);
            metric.add(110.8946, now);
            metric.add(250, now);
            metric.add(192, now);

            expect(Metric.getMetricByName('bin-stuff')).to.equal(metric);
            setTimeout(() => {

                const then = new Date();
                metric.add(195, then);
                metric.add(154, then);
            }, 3000);

            setTimeout(() => {

                metric.process();
                expect(metric.values.map((x) => x.observation)).to
                    .equal([
                        { v: { max: 250, 12: 3, 13: 1, 1: 1 }, u: 0.1, b: 2 },
                        { v: { max: 195, 12: 2 }, u: 0.1, b: 2 }
                    ]);
                metric.process(new Date(), true);
                metric.timestamp = new Date();
                metric.timestamp.setDate(metric.timestamp.getDate() -  10000);
                metric.process();
                done();
            }, 6000);

        });

        it('should create a binning metric like in Java', { plan: 1, timeout: 20000 }, (done) => {

            const metric = new Binning({
                kind: 'Binning',
                name: 'bin-java-stuff',
                period: 1.0
            }, { base: 2.0, factor: 1.0 });

            const now = new Date();

            metric.add(1.0, now);
            metric.add(0.2, now);
            metric.add(2.2, now);
            metric.add(2.0, now);
            metric.add(-0.0, now);

            setTimeout(() => {

                metric.process();
                expect(metric.values.map((x) => x.observation)).to
                    .equal([
                        { v: { max: 2.2, 1: 2, 2: 1, 3: 2 }, u: 1.0, b: 2.0 }
                    ]);
                done();
            }, 1100);

        });

    });
});
