/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();
const beforeEach = lab.beforeEach;

const describe = lab.describe;
const it = lab.it;
const expect = Code.expect;

const Metric = require('../../../lib_old/metric');
const Sum = require('../../../lib_old/metric/sum');

describe('Metric Old', () => {

    beforeEach((done) => {

        Metric._clearAllMetrics();
        require('../../../lib/command/features').featureHolder.use_signals = false;
        done();
    });

    describe('Sum', () => {

        it('should create a sum metric', { plan: 4, timeout: 20000 }, (done) => {

            const sum = new Sum({
                kind: 'Sum',
                name: 'login-fail',
                period: 2
            });

            sum.add('key1', 1);
            sum.add('key2', 1);

            expect(Metric.getMetricByName('login-fail')).to.equal(sum);
            setTimeout(() => {

                sum.add('key1', 1);
                sum.add('key1', 1);
                sum.add('key3', 1);
            }, 3000);

            setTimeout(() => {

                sum.process();
                expect(sum.values.map((x) => x.observation)).to.equal([{ 'key1': 1, 'key2': 1 }, { 'key1': 2, 'key3': 1 }]);
                expect(sum.observe().map((x) => x.observation)).to.equal([{ 'key1': 1, 'key2': 1 }, { 'key1': 2, 'key3': 1 }]);
                Metric.getAllReports();
                expect(sum.values.map((x) => x.observation)).to.equal([]);
                done();
            }, 6000);

        });

        it('should create a sum metric and test plenty of things', { plan: 4, timeout: 20000 }, (done) => {

            const sum = new Sum({
                kind: 'Sum',
                name: 'test-sum',
                period: 5
            });

            sum.add('str', 1);
            sum.add(null, 1);
            sum.add({ a: { b: {} } }, 1);
            sum.add([{ a: { b: {} } }], 1);
            sum.add([{ a: { b: { c: { d: {} } } } }], 1);
            sum.add(10, 1);
            sum.add({ a: 1 }, 1);
            sum.add({ a: 1 }, 1);
            sum.add({ b: 1 }, 1);
            sum.add([1, 2, 'hello'], 1);
            sum.add([1, 'hello', 2], 1);
            sum.add(true, 1);

            setTimeout(() => {

                sum.process();
                const report = Metric.getAllReports(true).find((x) => x.name === 'test-sum');

                expect(report).to.exist();
                expect(report.observation).to.equal({
                    str: 1
                });

                expect(report.object_observation).to.equal([
                    { key: { a: { b: {} } }, value: 1 },
                    { key: [{ a: { b: {} } }], value: 1 },
                    { key: { a: 1 }, value: 2 },
                    { key: { b: 1 }, value: 1 },
                    { key: [1, 2, 'hello'], value: 1 },
                    { key: [1, 'hello', 2], value: 1 },
                    { key: true, value: 1 }
                ]);

                expect(report.start.getSeconds() % 5).to.equal(0);

                done();
            }, 5000);
        });

    });
});
