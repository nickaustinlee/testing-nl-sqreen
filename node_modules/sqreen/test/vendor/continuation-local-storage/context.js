/**
 * Copyright (c) 2016 - 2020 Sqreen. All Rights Reserved.
 * Please refer to our terms for more information: https://www.sqreen.io/terms.html
 */
'use strict';
const Code = require('code');
const Lab = require('lab');
const lab = exports.lab = Lab.script();

const describe = lab.describe;
const it = lab.it;
// const beforeEach = lab.beforeEach;
// const afterEach = lab.afterEach;
const expect = Code.expect;
const CLS = require('../../../vendor/continuation-local-storage/context');
const Event = require('events');

const namespaceName = 'Hellooowww';

describe('vendored CLS', () => {

    it('should cover CLS regular cases', { plan: 3 }, (done) => {

        const context = CLS.createNamespace('my_space');

        try {
            context.set('aa', 'bb');
        }
        catch (e) {
            expect(e).to.exist();
        }
        expect(context.get('aa', 'bb')).to.not.exist();

        context.run(() => {

            context.set('hello', 'world');
            setTimeout(() => {

                expect(context.get('hello')).to.equal('world');
                done();
            });
        });
    });

    it('should cover CLS regular cases - run throw', { plan: 2 }, (done) => {

        const context = CLS.createNamespace('my_space');

        try {
            context.run(() => {

                throw new Error();
            });
        }
        catch (e) {
            expect(e).to.exist();
        }

        try {
            context.run(() => {

                throw null;
            });
        }
        catch (e) {
            expect(e).to.not.exist();
        }
        done();
    });

    it('should cover CLS regular cases - runAndReturn', { plan: 3 }, (done) => {

        const context = CLS.createNamespace('my_space');

        try {
            context.set('aa', 'bb');
        }
        catch (e) {
            expect(e).to.exist();
        }
        expect(context.get('aa', 'bb')).to.not.exist();

        context.runAndReturn(() => {

            context.set('hello', 'world');
            setTimeout(() => {

                expect(context.get('hello')).to.equal('world');
                done();
            });
        });
    });

    it('should cover CLS regular cases - bind', { plan: 3 }, (done) => {

        const context = CLS.createNamespace('my_space');

        try {
            context.set('aa', 'bb');
        }
        catch (e) {
            expect(e).to.exist();
        }
        expect(context.get('aa', 'bb')).to.not.exist();

        const actor = function () {

            context.set('hello', 'world');
            setTimeout(() => {

                expect(context.get('hello')).to.equal('world');
                done();
            });
        };
        context.bind(actor)();
    });

    it('should cover CLS regular cases - bind exception', { plan: 2 }, (done) => {

        const context = CLS.createNamespace('my_space');


        const actor = function () {

            throw new Error();
        };
        const actor2 = function () {

            throw null;
        };

        try {
            context.bind(actor)();
        }
        catch (e) {
            expect(e).to.exist();
        }
        try {
            context.bind(actor2)();
        }
        catch (e) {
            expect(e).to.not.exist();
        }
        done();
    });

    it('should handle multiple contexts', { plan: 1 }, (done) => {

        const session = CLS.createNamespace(namespaceName);

        const a1 = {};
        const a2 = {};
        session._set.push(a1);
        session._set.push(a2);
        session.exit(a2);
        expect(session._set).to.have.length(1);
        done();
    });

    it('should cover bindEmitter', { plan: 2 }, (done) => {

        const session = CLS.createNamespace(namespaceName);

        try {
            session.bindEmitter({});
        }
        catch (err) {
            expect(err).to.exist();
        }

        try {
            session.bindEmitter({ on: 1 });
        }
        catch (err) {
            expect(err).to.exist();
        }
        done();
    });

    it('should handle what happens in an emitter', { plan: 2 }, (done) => {

        const session = CLS.createNamespace(namespaceName);
        const emitter = new Event();

        expect(session.get('a')).to.not.exist();
        emitter.on('hello', () => {

            expect(session.get('a')).to.equal('aaa');
            done();
        });

        session.run(() => {

            session.bindEmitter(emitter);
            session.set('a', 'aaa');
            emitter.emit('hello');
        });
    });
});
